{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Werk24 Documentation \u00b6 Welcome to the Werk24 documentation! The following pages give you an overview on how to use our Technical Drawing Reading Services. Our Cloud service allows you to extract structured JSON data from Technical Drawings in unstructured File Formats like PDF, PNG, JPEG, TIFF and others. Clients \u00b6 To make your life as easy as possible, we offer a Command Line Interfaces, as well as clients for python and nodejs. If you need to use our API in a different language, please reach out to us at info@werk24.biz . Installation \u00b6 For your convenience, we are distributing the clients through PyPi and npmjs . Python pip install werk24 NodeJS npm install werk24 Send your first request \u00b6 To get all measures of (all variants) indicated on your drawing, you would pass an W24AskVariantMeasures instance along with the drawing bytes. Python import asyncio from werk24 import Hook , W24TechreadClient , W24AskVariantMeasures async def print_measures_of_drawing ( drawing_bytes ): hooks = [ Hook ( ask = W24AskVariantMeasures (), function = print )] async with W24TechreadClient . make_from_env () as session : await session . read_drawing_with_hooks ( document_bytes , hooks ) asyncio . run_until_complete ( print_measures_of_drawing ( ... )) NodeJS async def printMeasuresOfDrawing ( drawingBytes ) { const askLib = await werk24 . loadAsks (); const hooks = [ new werk24 . Hook ( new askLib . W24AskVariantMeasures (), console . log )]; let client = werk24 . W24TechreadClient . makeFromEnv (); try { await client . readDrawingWithHooks ( drawingBytes , hooks );} catch ( e ) { console . error ( e ); } finally { client . close (); } } printMeasuresOfDrawing (...) License File \u00b6 Reach out to us at info@werk24.biz to obtain your license file.","title":"Welcome"},{"location":"index.html#werk24-documentation","text":"Welcome to the Werk24 documentation! The following pages give you an overview on how to use our Technical Drawing Reading Services. Our Cloud service allows you to extract structured JSON data from Technical Drawings in unstructured File Formats like PDF, PNG, JPEG, TIFF and others.","title":"Werk24 Documentation"},{"location":"index.html#clients","text":"To make your life as easy as possible, we offer a Command Line Interfaces, as well as clients for python and nodejs. If you need to use our API in a different language, please reach out to us at info@werk24.biz .","title":"Clients"},{"location":"index.html#installation","text":"For your convenience, we are distributing the clients through PyPi and npmjs . Python pip install werk24 NodeJS npm install werk24","title":"Installation"},{"location":"index.html#send-your-first-request","text":"To get all measures of (all variants) indicated on your drawing, you would pass an W24AskVariantMeasures instance along with the drawing bytes. Python import asyncio from werk24 import Hook , W24TechreadClient , W24AskVariantMeasures async def print_measures_of_drawing ( drawing_bytes ): hooks = [ Hook ( ask = W24AskVariantMeasures (), function = print )] async with W24TechreadClient . make_from_env () as session : await session . read_drawing_with_hooks ( document_bytes , hooks ) asyncio . run_until_complete ( print_measures_of_drawing ( ... )) NodeJS async def printMeasuresOfDrawing ( drawingBytes ) { const askLib = await werk24 . loadAsks (); const hooks = [ new werk24 . Hook ( new askLib . W24AskVariantMeasures (), console . log )]; let client = werk24 . W24TechreadClient . makeFromEnv (); try { await client . readDrawingWithHooks ( drawingBytes , hooks );} catch ( e ) { console . error ( e ); } finally { client . close (); } } printMeasuresOfDrawing (...)","title":"Send your first request"},{"location":"index.html#license-file","text":"Reach out to us at info@werk24.biz to obtain your license file.","title":"License File"},{"location":"api/basics.html","text":"mermaid.initialize({startOnLoad:true}); mermaid.sequenceConfig = { diagramMarginX:50, diagramMarginY:10, boxTextMargin:5, noteMargin:10, messageMargin:35, mirrorActors:true }; API \u00b6 We have opted to use a combination of an HTTPS and Websockets Connection to allow the client to sit behind a firewall without the ability to provide a publicly available callback URL -> websockets The API is has three components that interact with each other: Authentication Client Techread HTTPS Client Techread Secure Websockets Client Note If you need the ability to submit a techread request, but have no access to websockets (e.g., because your programming language does not provide easy access), let us know and we will provide a HTTPS-only API endpoint. Communication Flow \u00b6 To make things a bit clearer, have a quick look at the sequence diagram below that describes a communication flow in which you are asking the W24 Techread API for two things: W24AskPageThumbnail: A Thumbnail of the Page W24AskVariantOverallDimensions: the overall dimensions of all the variants described on the page. sequenceDiagram participant You participant W24 Https participant W24 Websocket participant AWS Cognito rect rgb(200,200,200) Note over You, W24 Https: Authenticate You->>AWS Cognito: Authenticate AWS Cognito -->>You: Token end rect rgb(200,200,200) Note over You, W24 Https: Initiate Request with 2 Asks: -> W24AskPageThumbnail, -> W24AskVariantOverallDimensions You->>W24 Websocket: Initiate Request with Asks W24 Websocket -->>You: RequestId You->>W24 Https: Upload Drawing You->>W24 Websocket: Start Read Process end rect rgb(200,200,200) Note over You, W24 Https: Response for W24AskPageThumbnail W24 Websocket -->>You: Response You ->> W24 Https: Request `payload_url` W24 Https -->> You: Thumbnail as PNG end rect rgb(200,200,200) Note over You, W24 Https: Response for W24AskVariantOverallDimensions W24 Websocket -->>You: Response end Rational \u00b6 We have decided to use this (rather unusual) format for two main reasons: 1. Continuous Information Flow \u00b6 We want to ensure that you can consume the information whenever it becomes available. So rather than waiting for the complete process to complete (which can take up to 1 minute), you can quickly get the information you need. 2. Continuous Extendability \u00b6 We are constantly learning new things about your use cases and the particularities of the Technical Drawings that you submit (thank you oil and gas... we are having a lot of fun reading about your fanzy standards). This makes it important for us to quickly and easily extend the API capabilities without the need to maintain \"legacy APIs\". The chosen form allows us to continuously extend the functionality of the API while maintaining backwards-compatability. An easy example are the units in W24AskVariantOverallDimensions. Currently we quote the measures \"as-is\" from the Technical Drawing. So, if you submit two otherwise identical drawings, but change the units in one from Milimeter to Inches, you will currently receive the same response. This is clearly not desired and will be improved in the future. When we do, we'll add an attribute to the W24AskVariantOverallDimensions that allows you to choose the behaviour. By default it will mimick the old behaviour. Important We urge you to follow the Best Practices on Integration Testing. Check this Article for example. Clients \u00b6 The Python Client \u00b6 To make your life as developer as easy as possible, we have implemented a reference client in python. See API/TechreadClient for details.","title":"Basics"},{"location":"api/basics.html#api","text":"We have opted to use a combination of an HTTPS and Websockets Connection to allow the client to sit behind a firewall without the ability to provide a publicly available callback URL -> websockets The API is has three components that interact with each other: Authentication Client Techread HTTPS Client Techread Secure Websockets Client Note If you need the ability to submit a techread request, but have no access to websockets (e.g., because your programming language does not provide easy access), let us know and we will provide a HTTPS-only API endpoint.","title":"API"},{"location":"api/basics.html#communication-flow","text":"To make things a bit clearer, have a quick look at the sequence diagram below that describes a communication flow in which you are asking the W24 Techread API for two things: W24AskPageThumbnail: A Thumbnail of the Page W24AskVariantOverallDimensions: the overall dimensions of all the variants described on the page. sequenceDiagram participant You participant W24 Https participant W24 Websocket participant AWS Cognito rect rgb(200,200,200) Note over You, W24 Https: Authenticate You->>AWS Cognito: Authenticate AWS Cognito -->>You: Token end rect rgb(200,200,200) Note over You, W24 Https: Initiate Request with 2 Asks: -> W24AskPageThumbnail, -> W24AskVariantOverallDimensions You->>W24 Websocket: Initiate Request with Asks W24 Websocket -->>You: RequestId You->>W24 Https: Upload Drawing You->>W24 Websocket: Start Read Process end rect rgb(200,200,200) Note over You, W24 Https: Response for W24AskPageThumbnail W24 Websocket -->>You: Response You ->> W24 Https: Request `payload_url` W24 Https -->> You: Thumbnail as PNG end rect rgb(200,200,200) Note over You, W24 Https: Response for W24AskVariantOverallDimensions W24 Websocket -->>You: Response end","title":"Communication Flow"},{"location":"api/basics.html#rational","text":"We have decided to use this (rather unusual) format for two main reasons:","title":"Rational"},{"location":"api/basics.html#1-continuous-information-flow","text":"We want to ensure that you can consume the information whenever it becomes available. So rather than waiting for the complete process to complete (which can take up to 1 minute), you can quickly get the information you need.","title":"1. Continuous Information Flow"},{"location":"api/basics.html#2-continuous-extendability","text":"We are constantly learning new things about your use cases and the particularities of the Technical Drawings that you submit (thank you oil and gas... we are having a lot of fun reading about your fanzy standards). This makes it important for us to quickly and easily extend the API capabilities without the need to maintain \"legacy APIs\". The chosen form allows us to continuously extend the functionality of the API while maintaining backwards-compatability. An easy example are the units in W24AskVariantOverallDimensions. Currently we quote the measures \"as-is\" from the Technical Drawing. So, if you submit two otherwise identical drawings, but change the units in one from Milimeter to Inches, you will currently receive the same response. This is clearly not desired and will be improved in the future. When we do, we'll add an attribute to the W24AskVariantOverallDimensions that allows you to choose the behaviour. By default it will mimick the old behaviour. Important We urge you to follow the Best Practices on Integration Testing. Check this Article for example.","title":"2. Continuous Extendability"},{"location":"api/basics.html#clients","text":"","title":"Clients"},{"location":"api/basics.html#the-python-client","text":"To make your life as developer as easy as possible, we have implemented a reference client in python. See API/TechreadClient for details.","title":"The Python Client"},{"location":"api/communication-flow.html","text":"","title":"Communication flow"},{"location":"api/drawing_bytes.html","text":"The following file formats are supported. Extension Name .bmp Windows bitmaps .jp2 JPEG 2000 files .jpeg JPEG files .png Portable Network Graphics .tiff TIFF files .pdf Portable Document Format (Vectorized and Raster)","title":"Drawing bytes"},{"location":"api/techread-client.html","text":"TechreadClient \u00b6 The Techread Client is a python-based reference implementation to illustrate the communication with the werk24 API. It is actively maintained and will be the lead-implementation for all our development efforts. Initiating the Client \u00b6 You can make a new Techread client in two lines of code. from werk24 import W24TechreadClient client = W24TechreadClient.make_from_env() This will create a new client from the environment variables. The client will look for the credentials in the .werk24 file in your working directory. If the file cannot be found, the Client falls back to the information it can obtain from the ENVIRONMENT VARIABLES . The Ask Concept \u00b6 We understand that the individual use-cases can vary largely. Take these two extremes: Application 1 runs a batch job to obtain thumbnails of the main sectional on a Technical Drawing. Application 2 wants to derive the minimal tolerances on an A0 Technical drawing to inform the live-pricing engine. The user remains online and wants to be entertained while she is waiting for the price assessment. To serve both applications with the same API, we have introduced the concept \"Ask\", which allows you to define very precicely what you want to learn about the Technical Drawing. Each \"Ask\" then triggers a response as soon as the information becomes available. To come back to our application: Applciation 1 would submit only one Ask: W24AskSectionalThumbnail() Application 2 would submit multiple Asks W24AskSheetThumbnail() -- gives the user an overview over the complete sheet W24AskSectionalThumbail() -- shows to the user that the individual sectionals have been separated correctly W24AskVariantMeasures() -- delivers the complete information about the Measures (incl. tolerances) See API/Asks for details. Defining Hooks \u00b6 To make your life as developer as easy as possible, we introduced a small Hook object that allows you to define The Ask, and What function should be called when the Ask is answered The defintion is very simple: from werk24 import Hook,W24AskVariantMeasures hooks = [Hook(ask=W24AskVariantMeasures(), function=print)] For a full list of available asks, refer to API/Asks Submitting a Request \u00b6 Submitting a request requires you to start a session and submit both, a Technical Drawing (as bytes) and a list of hooks drawing_path = ... drawing_bytes = open(drawing_path, \"rb\").read() async with client as session session.read_drawing_with_hooks( drawing_bytes, hooks) !!! important Be sure to call the sniplet asyncinously (see Full Example) Full Example \u00b6 Combining all parts from above, we arrive at the full example. When you call the script with the path to a Technical Drawing as first argument, you should shortly after see the measures that were detected on the Drawing. Be aware that the API will return a response for each sectional that was found on the Canvas. If your Document contains 2 Pages with 2 Sectionals each, you will receive 4 responses. import asyncio import sys from dotenv import load_dotenv from werk24 import W24TechreadClient, W24AskVariantMeasures, Hook load_dotenv('.werk24') async def main(drawing_path:str) -> None: # define the hooks hooks = [Hook(ask=W24AskVariantMeasures(), function=print)] # make the session and start the reading process client = W24TechreadClient.make_from_env() async with client as session: await session.read_drawing_with_hooks(drawing_bytes, hooks) if __name__ == \"__main__\": try: drawing_path = sys.argv[1] # get the drawing with open(drawing_path, \"rb\") as drawing_handle: drawing_bytes = drawing_handle.read() except FileNotFoundError: sys.exit(\"File not found\") except KeyError: sys.exit(\"Drawing Path Required as first argument\") asyncio.run(main(drawing_path)) Further Pointers \u00b6 In case you plan to implement your own client, have a look at the structure of the Python client. It has three \"Sublclients\" that deal with the different kind of endpoints. Important Please talk to us before you start implementing a client in a different language. We are happy to perform peer reviews and would love to make the client available to other customers. Authentication Client \u00b6 The Authentication Client allows you to obtain a JWT Token from AWS Cognito (see Basics/Authentication ). This Token needs to be added to each HTTPS and WSS request as Authorization: Bearer ... . Obtaining the Token is straight-foward, mainly because frameworks for many languages exist. See Github/werk24/werk24-python/auth_client.py for a python-based reference implementation. Techread HTTPS Client \u00b6 The Techread HTTPS Client is used to Upload Technical Drawings Upload Models Download binary Ask Responses Techread WSS Client \u00b6 The Techread WSS Client is used to: Initiate a Request Listen to Responses in \"near-real-time\"","title":"TechreadClient"},{"location":"api/techread-client.html#techreadclient","text":"The Techread Client is a python-based reference implementation to illustrate the communication with the werk24 API. It is actively maintained and will be the lead-implementation for all our development efforts.","title":"TechreadClient"},{"location":"api/techread-client.html#initiating-the-client","text":"You can make a new Techread client in two lines of code. from werk24 import W24TechreadClient client = W24TechreadClient.make_from_env() This will create a new client from the environment variables. The client will look for the credentials in the .werk24 file in your working directory. If the file cannot be found, the Client falls back to the information it can obtain from the ENVIRONMENT VARIABLES .","title":"Initiating the Client"},{"location":"api/techread-client.html#the-ask-concept","text":"We understand that the individual use-cases can vary largely. Take these two extremes: Application 1 runs a batch job to obtain thumbnails of the main sectional on a Technical Drawing. Application 2 wants to derive the minimal tolerances on an A0 Technical drawing to inform the live-pricing engine. The user remains online and wants to be entertained while she is waiting for the price assessment. To serve both applications with the same API, we have introduced the concept \"Ask\", which allows you to define very precicely what you want to learn about the Technical Drawing. Each \"Ask\" then triggers a response as soon as the information becomes available. To come back to our application: Applciation 1 would submit only one Ask: W24AskSectionalThumbnail() Application 2 would submit multiple Asks W24AskSheetThumbnail() -- gives the user an overview over the complete sheet W24AskSectionalThumbail() -- shows to the user that the individual sectionals have been separated correctly W24AskVariantMeasures() -- delivers the complete information about the Measures (incl. tolerances) See API/Asks for details.","title":"The Ask Concept"},{"location":"api/techread-client.html#defining-hooks","text":"To make your life as developer as easy as possible, we introduced a small Hook object that allows you to define The Ask, and What function should be called when the Ask is answered The defintion is very simple: from werk24 import Hook,W24AskVariantMeasures hooks = [Hook(ask=W24AskVariantMeasures(), function=print)] For a full list of available asks, refer to API/Asks","title":"Defining Hooks"},{"location":"api/techread-client.html#submitting-a-request","text":"Submitting a request requires you to start a session and submit both, a Technical Drawing (as bytes) and a list of hooks drawing_path = ... drawing_bytes = open(drawing_path, \"rb\").read() async with client as session session.read_drawing_with_hooks( drawing_bytes, hooks) !!! important Be sure to call the sniplet asyncinously (see Full Example)","title":"Submitting a Request"},{"location":"api/techread-client.html#full-example","text":"Combining all parts from above, we arrive at the full example. When you call the script with the path to a Technical Drawing as first argument, you should shortly after see the measures that were detected on the Drawing. Be aware that the API will return a response for each sectional that was found on the Canvas. If your Document contains 2 Pages with 2 Sectionals each, you will receive 4 responses. import asyncio import sys from dotenv import load_dotenv from werk24 import W24TechreadClient, W24AskVariantMeasures, Hook load_dotenv('.werk24') async def main(drawing_path:str) -> None: # define the hooks hooks = [Hook(ask=W24AskVariantMeasures(), function=print)] # make the session and start the reading process client = W24TechreadClient.make_from_env() async with client as session: await session.read_drawing_with_hooks(drawing_bytes, hooks) if __name__ == \"__main__\": try: drawing_path = sys.argv[1] # get the drawing with open(drawing_path, \"rb\") as drawing_handle: drawing_bytes = drawing_handle.read() except FileNotFoundError: sys.exit(\"File not found\") except KeyError: sys.exit(\"Drawing Path Required as first argument\") asyncio.run(main(drawing_path))","title":"Full Example"},{"location":"api/techread-client.html#further-pointers","text":"In case you plan to implement your own client, have a look at the structure of the Python client. It has three \"Sublclients\" that deal with the different kind of endpoints. Important Please talk to us before you start implementing a client in a different language. We are happy to perform peer reviews and would love to make the client available to other customers.","title":"Further Pointers"},{"location":"api/techread-client.html#authentication-client","text":"The Authentication Client allows you to obtain a JWT Token from AWS Cognito (see Basics/Authentication ). This Token needs to be added to each HTTPS and WSS request as Authorization: Bearer ... . Obtaining the Token is straight-foward, mainly because frameworks for many languages exist. See Github/werk24/werk24-python/auth_client.py for a python-based reference implementation.","title":"Authentication Client"},{"location":"api/techread-client.html#techread-https-client","text":"The Techread HTTPS Client is used to Upload Technical Drawings Upload Models Download binary Ask Responses","title":"Techread HTTPS Client"},{"location":"api/techread-client.html#techread-wss-client","text":"The Techread WSS Client is used to: Initiate a Request Listen to Responses in \"near-real-time\"","title":"Techread WSS Client"},{"location":"asks/basics.html","text":"mermaid.initialize({startOnLoad:true}); mermaid.sequenceConfig = { diagramMarginX:50, diagramMarginY:10, boxTextMargin:5, noteMargin:10, messageMargin:35, mirrorActors:true }; Asks / Features \u00b6 Asks are your way to tell the Werk24 Techread API what Features you would like to learn about the Engineering Drawing. You can submit multiple asks at the same time and through the Websocket connection you will receive the responses whenever the associated data is available. So you don't have to wait until your complete request is completed, but can directly show your user a thumbnail (available typically in 200ms), while we are extracting the measures (typically 5-30sec, depending on the file size) The intend of this page is to give you a brief overview over the available Ask Types. Please refer to the API reference for a full description. graph TD Document --1:n--> Page Page --1:n--> Sheet Page --> PageAsks(\" AskPageThumbnail \"):::ask Sheet --1:1--> VariantTable Sheet --1:n--> Sectional Sheet --> SheetAsks(\" AskSheetThumbnail \"):::ask Sectional -.n:m.-> Variant VariantTable -.1:m.-> Variant Variant --> VariantGDTs(\" AskVariantGDTs \"):::ask Variant --> VariantMeasures(\" AskVariantMeasures \"):::ask Sectional --> SectionalAsks(\" AskSectionalThumbnail \"):::ask classDef ask fill:#cad;","title":"Overview"},{"location":"asks/basics.html#asks-features","text":"Asks are your way to tell the Werk24 Techread API what Features you would like to learn about the Engineering Drawing. You can submit multiple asks at the same time and through the Websocket connection you will receive the responses whenever the associated data is available. So you don't have to wait until your complete request is completed, but can directly show your user a thumbnail (available typically in 200ms), while we are extracting the measures (typically 5-30sec, depending on the file size) The intend of this page is to give you a brief overview over the available Ask Types. Please refer to the API reference for a full description. graph TD Document --1:n--> Page Page --1:n--> Sheet Page --> PageAsks(\" AskPageThumbnail \"):::ask Sheet --1:1--> VariantTable Sheet --1:n--> Sectional Sheet --> SheetAsks(\" AskSheetThumbnail \"):::ask Sectional -.n:m.-> Variant VariantTable -.1:m.-> Variant Variant --> VariantGDTs(\" AskVariantGDTs \"):::ask Variant --> VariantMeasures(\" AskVariantMeasures \"):::ask Sectional --> SectionalAsks(\" AskSectionalThumbnail \"):::ask classDef ask fill:#cad;","title":"Asks / Features"},{"location":"asks/canvas_thumbnail.html","text":"W24Canvas \u00b6 The W24Canvas descibes the part of the W24Sheet that is thought to carry the drawing. Keep in mind that some Sheets will contain 2 or more Canvases. When you request a W24AskCanvasThumbnail, be sure to handle all the responses! W24AskCanvasThumbnail \u00b6 The W24AskCanvasThumbnail will return a thumbnail for each canvas on the sheet PAYLOAD DICT EXAMPLE document_id ( UUID4 ) Unique UUID that identifies the document \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\" page_id ( UUID4 ) Unqiue UUID that identifies the page \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\" sheet_id ( UUID4 ) Unqiue UUID that identifies the sheet \"5bc164d4-df0d-4482-9048-3a84de010abf\" canvas_id ( UUID4 ) Unqiue UUID that identifies the canvas \"9e6399a6-0b43-4b47-a416-0918254bba16\" PAYLOAD URL EXAMPLE url ( HttpUrl ) Url of the payload (requires token authentication) https://techread.w24.io/download/1a0230ea-4a96-4522-ae8e-a25aed463a3e","title":"Canvas / Thumbnail"},{"location":"asks/canvas_thumbnail.html#w24canvas","text":"The W24Canvas descibes the part of the W24Sheet that is thought to carry the drawing. Keep in mind that some Sheets will contain 2 or more Canvases. When you request a W24AskCanvasThumbnail, be sure to handle all the responses!","title":"W24Canvas"},{"location":"asks/canvas_thumbnail.html#w24askcanvasthumbnail","text":"The W24AskCanvasThumbnail will return a thumbnail for each canvas on the sheet PAYLOAD DICT EXAMPLE document_id ( UUID4 ) Unique UUID that identifies the document \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\" page_id ( UUID4 ) Unqiue UUID that identifies the page \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\" sheet_id ( UUID4 ) Unqiue UUID that identifies the sheet \"5bc164d4-df0d-4482-9048-3a84de010abf\" canvas_id ( UUID4 ) Unqiue UUID that identifies the canvas \"9e6399a6-0b43-4b47-a416-0918254bba16\" PAYLOAD URL EXAMPLE url ( HttpUrl ) Url of the payload (requires token authentication) https://techread.w24.io/download/1a0230ea-4a96-4522-ae8e-a25aed463a3e","title":"W24AskCanvasThumbnail"},{"location":"asks/page_thumbnail.html","text":"W24Document & W24Page \u00b6 As the image below illustrates, a W24Document constists of one or more W24Pages. You can think of it as the pages in the PDF document that you submitted. If you send us an image, the W24Document will have exactly one page: your image. Our algorithm automatically assesses the contents of each page and classifies it either as W24TitlePage or W24Sheet. W24AskPageThumbnail \u00b6 The W24AskPageThumbnail will return a thumbnail for each page in the document. You will receive one W24AskPageThumbnailResponse for each Page in the Document. The The Page Thumbnail will differ from the original Document in serveral ways: It is converted to grayscale , i.e, no matter how colorful the original drawing was, you will always receive a grayscale image in response. It is denoised , i.e, various kinds of noise will have been removed PAYLOAD DICT EXAMPLE document_id ( UUID4 ) Unique UUID that identifies the document \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\" page_id ( UUID4 ) Unqiue UUID that identifies the page \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\" PAYLOAD URL EXAMPLE url ( HttpUrl ) Url of the payload (requires token authentication) https://techread.w24.io/download/1a0230ea-4a96-4522-ae8e-a25aed463a3e","title":"Page / Thumbnail"},{"location":"asks/page_thumbnail.html#w24document-w24page","text":"As the image below illustrates, a W24Document constists of one or more W24Pages. You can think of it as the pages in the PDF document that you submitted. If you send us an image, the W24Document will have exactly one page: your image. Our algorithm automatically assesses the contents of each page and classifies it either as W24TitlePage or W24Sheet.","title":"W24Document &amp; W24Page"},{"location":"asks/page_thumbnail.html#w24askpagethumbnail","text":"The W24AskPageThumbnail will return a thumbnail for each page in the document. You will receive one W24AskPageThumbnailResponse for each Page in the Document. The The Page Thumbnail will differ from the original Document in serveral ways: It is converted to grayscale , i.e, no matter how colorful the original drawing was, you will always receive a grayscale image in response. It is denoised , i.e, various kinds of noise will have been removed PAYLOAD DICT EXAMPLE document_id ( UUID4 ) Unique UUID that identifies the document \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\" page_id ( UUID4 ) Unqiue UUID that identifies the page \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\" PAYLOAD URL EXAMPLE url ( HttpUrl ) Url of the payload (requires token authentication) https://techread.w24.io/download/1a0230ea-4a96-4522-ae8e-a25aed463a3e","title":"W24AskPageThumbnail"},{"location":"asks/sectional.html","text":"W24Sectional \u00b6 The W24Sectional is an umbrella term to describe: the perspective drawings looking onto the work piece, and the cuts through the work piece W24AskSectionalThumbnail \u00b6 The W24AskSectionalThumbnail will return a thumbnail for each plane on the sheet. This also includes detail drawings. The thumbnail will be rotated automatically. PAYLOAD DICT document_id ( UUID4 ) Example: \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\" Unique UUID that identifies the document page_id ( UUID4 ) Example: \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\" Unqiue UUID that identifies the page sheet_id ( UUID4 ) Example: \"5bc164d4-df0d-4482-9048-3a84de010abf\" Unqiue UUID that identifies the sheet sectional_id ( UUID4 ) Example: \"ba72f9f1-918a-43c9-8178-095ff9910024\" Unqiue UUID that identifies the sectional PAYLOAD URL url Http -- Example: https://techread.w24.io/download/93bbef40-a433-4276-bc3f-0e341c67a75c Important Accessing the payload url requires a valid authentication token","title":"Sectional"},{"location":"asks/sectional.html#w24sectional","text":"The W24Sectional is an umbrella term to describe: the perspective drawings looking onto the work piece, and the cuts through the work piece","title":"W24Sectional"},{"location":"asks/sectional.html#w24asksectionalthumbnail","text":"The W24AskSectionalThumbnail will return a thumbnail for each plane on the sheet. This also includes detail drawings. The thumbnail will be rotated automatically. PAYLOAD DICT document_id ( UUID4 ) Example: \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\" Unique UUID that identifies the document page_id ( UUID4 ) Example: \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\" Unqiue UUID that identifies the page sheet_id ( UUID4 ) Example: \"5bc164d4-df0d-4482-9048-3a84de010abf\" Unqiue UUID that identifies the sheet sectional_id ( UUID4 ) Example: \"ba72f9f1-918a-43c9-8178-095ff9910024\" Unqiue UUID that identifies the sectional PAYLOAD URL url Http -- Example: https://techread.w24.io/download/93bbef40-a433-4276-bc3f-0e341c67a75c Important Accessing the payload url requires a valid authentication token","title":"W24AskSectionalThumbnail"},{"location":"asks/sheet_thumbnail.html","text":"W24Sheet \u00b6 If a W24Page contains a Technical Drawing, it will be classified as W24Sheet. The Sheet corresponds to the content of the main frame on the Page. If the page does not contain such a frame, the complete Page is interpreted as Sheet. The Sheet Thumbnail will differ from the original Document in serveral ways: It is converted to grayscale , i.e, no matter how colorful the original drawing was, you will always receive a grayscale image in response. It is denoised , i.e, various kinds of noise will have been removed It is uprighted , i.e., rotated in the way a human intelligence would W24AskSheetThumbnail \u00b6 The W24AskSheetThumbnail will return a thumbnail for each sheet in the document. PAYLOAD DICT EXAMPLE document_id ( UUID4 ) Unique UUID that identifies the document \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\" page_id ( UUID4 ) Unqiue UUID that identifies the page \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\" sheet_id ( UUID4 ) Unqiue UUID that identifies the sheet \"5bc164d4-df0d-4482-9048-3a84de010abf\" PAYLOAD URL EXAMPLE url ( HttpUrl ) Url of the payload (requires token authentication) https://techread.w24.io/download/1a0230ea-4a96-4522-ae8e-a25aed463a3e","title":"Sheet / Thumbnail"},{"location":"asks/sheet_thumbnail.html#w24sheet","text":"If a W24Page contains a Technical Drawing, it will be classified as W24Sheet. The Sheet corresponds to the content of the main frame on the Page. If the page does not contain such a frame, the complete Page is interpreted as Sheet. The Sheet Thumbnail will differ from the original Document in serveral ways: It is converted to grayscale , i.e, no matter how colorful the original drawing was, you will always receive a grayscale image in response. It is denoised , i.e, various kinds of noise will have been removed It is uprighted , i.e., rotated in the way a human intelligence would","title":"W24Sheet"},{"location":"asks/sheet_thumbnail.html#w24asksheetthumbnail","text":"The W24AskSheetThumbnail will return a thumbnail for each sheet in the document. PAYLOAD DICT EXAMPLE document_id ( UUID4 ) Unique UUID that identifies the document \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\" page_id ( UUID4 ) Unqiue UUID that identifies the page \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\" sheet_id ( UUID4 ) Unqiue UUID that identifies the sheet \"5bc164d4-df0d-4482-9048-3a84de010abf\" PAYLOAD URL EXAMPLE url ( HttpUrl ) Url of the payload (requires token authentication) https://techread.w24.io/download/1a0230ea-4a96-4522-ae8e-a25aed463a3e","title":"W24AskSheetThumbnail"},{"location":"asks/variant_gdts.html","text":"W24AskVariantGDTs \u00b6 The W24ASkVariantGDTs returns a list of all Geometric Dimensioning and Tolerancing Frames (GD&Ts) that we found on the Technical Drawing. Background Information \u00b6 Geometric Dimensioning and Tolerancing (GD&T) is a system for defining and communicating the allowed geometric deviations from the norm geometry. These deviations can conecern the shape, direction, location and run of a feature relative to a reference position. The table below gives you an overview of the available attributes Shape Direction Location Run \u23e4 Straightness \u2225 Parallelism \u2316 Position \u2197 Circular Runout \u23e5 Flattness \u27c2 Perpendicularity \u25ce Concentricity \u25cb Circularity \u2220 Angularity \u25ce Coaxiality \u232d Cylindricity \u232f Symmetry \u2312 Line Profile \u2312 Line Profile \u2312 Line Profile \u2330 Total Runout \u2313 Surface Profile \u2313 Surface Profile \u2313 Surface Profile Source: Hoischen, H., & Hesser, W.(2011): Technisches Zeichnen: Grundlagen, Normen, Beispiele, darstellende Geometrie ; Lehr-, \u00dcbungs- und Nachschlagewerk f\u00fcr Schule, Fortbildung, Studium und Praxis ; mit mehr als 100 Tabellen 33., \u00fcberarb. und aktualisierte Aufl.. Cornelsen. Norms \u00b6 The details are normed in ISO TC 10 (Technical product documentation), ISO/TC 213 (Dimensional and geometrical product specifications and verification), ASME Y14.41 (Digital Product Defintion Data Practices), ASME 14.5 (Dimensioning and Tolerancing), ASME Y14.5.1M (Mathematical Definition of Dimensioning and Tolerancing Principles), and ISO 10303 (Industrial automation systems and integration - Product data representation and exchange). W24AskVariantMeasures return a list of all measures that we were able to detect on the Technical Drawing. Please refer to the W24MeasureLabel model to learn how to access the Thread , Tolerance , and Chamfer information. Number of Responses \u00b6 The API will return one response for every variant-sectional. When you process the response, you need to be aware that each document can have multiple pages, each page can have multiple sheets, each sheet can have multiple canvases, each canvas can have multiple variants, and each variant can have multiple sectionals As result, you will #Pages x #Sheets x #Canvases x #Variants x #Sectionals responses to your ask. Payload \u00b6 PAYLOAD DICT EXAMPLE document_id ( UUID4 ) Unique UUID that identifies the document \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\" page_id ( UUID4 ) Unqiue UUID that identifies the page \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\" sheet_id ( UUID4 ) Unqiue UUID that identifies the sheet \"5bc164d4-df0d-4482-9048-3a84de010abf\" canvas_id ( UUID4 ) Unqiue UUID that identifies the canvas \"9e6399a6-0b43-4b47-a416-0918254bba16\" variant_id ( UUID4 ) Unqiue UUID that identifies the variant \"2680c8ca-6c74-4665-b293-02552d4f00a5 sectional_id ( UUID4 ) Unqiue UUID that identifies the sectional \"7c02d5cf-2939-443f-a399-2d8ea2fffaa3\" gdt ( List[W24GDT] ) List of all GD&Ts that were detected on the Sectional See Models/W24GDT","title":"Variant / GD&Ts"},{"location":"asks/variant_gdts.html#w24askvariantgdts","text":"The W24ASkVariantGDTs returns a list of all Geometric Dimensioning and Tolerancing Frames (GD&Ts) that we found on the Technical Drawing.","title":"W24AskVariantGDTs"},{"location":"asks/variant_gdts.html#background-information","text":"Geometric Dimensioning and Tolerancing (GD&T) is a system for defining and communicating the allowed geometric deviations from the norm geometry. These deviations can conecern the shape, direction, location and run of a feature relative to a reference position. The table below gives you an overview of the available attributes Shape Direction Location Run \u23e4 Straightness \u2225 Parallelism \u2316 Position \u2197 Circular Runout \u23e5 Flattness \u27c2 Perpendicularity \u25ce Concentricity \u25cb Circularity \u2220 Angularity \u25ce Coaxiality \u232d Cylindricity \u232f Symmetry \u2312 Line Profile \u2312 Line Profile \u2312 Line Profile \u2330 Total Runout \u2313 Surface Profile \u2313 Surface Profile \u2313 Surface Profile Source: Hoischen, H., & Hesser, W.(2011): Technisches Zeichnen: Grundlagen, Normen, Beispiele, darstellende Geometrie ; Lehr-, \u00dcbungs- und Nachschlagewerk f\u00fcr Schule, Fortbildung, Studium und Praxis ; mit mehr als 100 Tabellen 33., \u00fcberarb. und aktualisierte Aufl.. Cornelsen.","title":"Background Information"},{"location":"asks/variant_gdts.html#norms","text":"The details are normed in ISO TC 10 (Technical product documentation), ISO/TC 213 (Dimensional and geometrical product specifications and verification), ASME Y14.41 (Digital Product Defintion Data Practices), ASME 14.5 (Dimensioning and Tolerancing), ASME Y14.5.1M (Mathematical Definition of Dimensioning and Tolerancing Principles), and ISO 10303 (Industrial automation systems and integration - Product data representation and exchange). W24AskVariantMeasures return a list of all measures that we were able to detect on the Technical Drawing. Please refer to the W24MeasureLabel model to learn how to access the Thread , Tolerance , and Chamfer information.","title":"Norms"},{"location":"asks/variant_gdts.html#number-of-responses","text":"The API will return one response for every variant-sectional. When you process the response, you need to be aware that each document can have multiple pages, each page can have multiple sheets, each sheet can have multiple canvases, each canvas can have multiple variants, and each variant can have multiple sectionals As result, you will #Pages x #Sheets x #Canvases x #Variants x #Sectionals responses to your ask.","title":"Number of Responses"},{"location":"asks/variant_gdts.html#payload","text":"PAYLOAD DICT EXAMPLE document_id ( UUID4 ) Unique UUID that identifies the document \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\" page_id ( UUID4 ) Unqiue UUID that identifies the page \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\" sheet_id ( UUID4 ) Unqiue UUID that identifies the sheet \"5bc164d4-df0d-4482-9048-3a84de010abf\" canvas_id ( UUID4 ) Unqiue UUID that identifies the canvas \"9e6399a6-0b43-4b47-a416-0918254bba16\" variant_id ( UUID4 ) Unqiue UUID that identifies the variant \"2680c8ca-6c74-4665-b293-02552d4f00a5 sectional_id ( UUID4 ) Unqiue UUID that identifies the sectional \"7c02d5cf-2939-443f-a399-2d8ea2fffaa3\" gdt ( List[W24GDT] ) List of all GD&Ts that were detected on the Sectional See Models/W24GDT","title":"Payload"},{"location":"asks/variant_measures.html","text":"W24Variant \u00b6 Each sheet may describe one or more Variants, depending on the precense of a W24VariantTable. In most cases a Technical Drawing will only describe one Variant (i.e., one Part), but we see W24VariantTables in about 2-5% of the files. So be sure to implement the handling of multiple variants. W24AskVariantMeasures \u00b6 W24AskVariantMeasures return a list of all measures that we were able to detect on the Technical Drawing. Please refer to the W24MeasureLabel model to learn how to access the Thread , Tolerance , and Chamfer information. The API will return one response for every variant-sectional. When you process the response, you need to be aware that each document can have multiple pages, each page can have multiple sheets, each sheet can have multiple canvases, each canvas can have multiple variants, and each variant can have multiple sectionals As result, you will #Pages x #Sheets x #Canvases x #Variants x #Sectionals responses to your ask. PAYLOAD DICT EXAMPLE document_id ( UUID4 ) Unique UUID that identifies the document \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\" page_id ( UUID4 ) Unqiue UUID that identifies the page \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\" sheet_id ( UUID4 ) Unqiue UUID that identifies the sheet \"5bc164d4-df0d-4482-9048-3a84de010abf\" canvas_id ( UUID4 ) Unqiue UUID that identifies the canvas \"9e6399a6-0b43-4b47-a416-0918254bba16\" variant_id ( UUID4 ) Unqiue UUID that identifies the variant \"2680c8ca-6c74-4665-b293-02552d4f00a5 sectional_id ( UUID4 ) Unqiue UUID that identifies the sectional \"7c02d5cf-2939-443f-a399-2d8ea2fffaa3\" measures ( List[W24Measure] ) List of all the Measures that were detected on the Sectional See Models/W24Measure","title":"Variant / Measures"},{"location":"asks/variant_measures.html#w24variant","text":"Each sheet may describe one or more Variants, depending on the precense of a W24VariantTable. In most cases a Technical Drawing will only describe one Variant (i.e., one Part), but we see W24VariantTables in about 2-5% of the files. So be sure to implement the handling of multiple variants.","title":"W24Variant"},{"location":"asks/variant_measures.html#w24askvariantmeasures","text":"W24AskVariantMeasures return a list of all measures that we were able to detect on the Technical Drawing. Please refer to the W24MeasureLabel model to learn how to access the Thread , Tolerance , and Chamfer information. The API will return one response for every variant-sectional. When you process the response, you need to be aware that each document can have multiple pages, each page can have multiple sheets, each sheet can have multiple canvases, each canvas can have multiple variants, and each variant can have multiple sectionals As result, you will #Pages x #Sheets x #Canvases x #Variants x #Sectionals responses to your ask. PAYLOAD DICT EXAMPLE document_id ( UUID4 ) Unique UUID that identifies the document \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\" page_id ( UUID4 ) Unqiue UUID that identifies the page \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\" sheet_id ( UUID4 ) Unqiue UUID that identifies the sheet \"5bc164d4-df0d-4482-9048-3a84de010abf\" canvas_id ( UUID4 ) Unqiue UUID that identifies the canvas \"9e6399a6-0b43-4b47-a416-0918254bba16\" variant_id ( UUID4 ) Unqiue UUID that identifies the variant \"2680c8ca-6c74-4665-b293-02552d4f00a5 sectional_id ( UUID4 ) Unqiue UUID that identifies the sectional \"7c02d5cf-2939-443f-a399-2d8ea2fffaa3\" measures ( List[W24Measure] ) List of all the Measures that were detected on the Sectional See Models/W24Measure","title":"W24AskVariantMeasures"},{"location":"cli/basic.html","text":"Command Line Interface \u00b6 If you have installed Werk24 with PIP, you will have the w24cli command available. usage: w24cli [-h] {techread} ... positional arguments: {techread} techread Submit a Technical Drawing to Werk24 for analysis optional arguments: -h, --help show this help message and exit Subcommand Techread \u00b6 The command line interface allows you to interact with the Werk24 APIs. To ensure downwards compatibility, we have added the subcommand ' techread '. Further subcommands might follow in the future.","title":"Basic"},{"location":"cli/basic.html#command-line-interface","text":"If you have installed Werk24 with PIP, you will have the w24cli command available. usage: w24cli [-h] {techread} ... positional arguments: {techread} techread Submit a Technical Drawing to Werk24 for analysis optional arguments: -h, --help show this help message and exit","title":"Command Line Interface"},{"location":"cli/basic.html#subcommand-techread","text":"The command line interface allows you to interact with the Werk24 APIs. To ensure downwards compatibility, we have added the subcommand ' techread '. Further subcommands might follow in the future.","title":"Subcommand Techread"},{"location":"cli/techread.html","text":"Techread Subcommand \u00b6 The techread subcommand allows you to submit your Technical Drawing and ask Werk24 to return certain details about it. We call these details \"asks\". See API/Asks for a more detailed description. While the API allows you to define your asks in a more granular way, the CLI will always request each ask with its default attributes. Available Commands \u00b6 The sniplet below gives you an overview over the available commands. You can obtain the same output by calling w24cli techread --help . usage: w24cli techread [-h] [--ask-techread-started] [--ask-page-thumbnail] [--ask-sheet-thumbnail] [--ask-sectional-thumbnail] [--ask-variant-measures] input_file positional arguments: input_file path to the file that is to be analyzed optional arguments: -h, --help show this help message and exit --ask-techread-started ask for a callback when the techread process has been picked up by a worker --ask-page-thumbnail ask for a thumbnail for each page in the document --ask-sheet-thumbnail ask for a thumbnail of each sheet in the document --ask-sectional-thumbnail ask for a thumbnail of each sectional of each sheet in the document --ask-variant-measures ask for the measures of each variant","title":"Techread"},{"location":"cli/techread.html#techread-subcommand","text":"The techread subcommand allows you to submit your Technical Drawing and ask Werk24 to return certain details about it. We call these details \"asks\". See API/Asks for a more detailed description. While the API allows you to define your asks in a more granular way, the CLI will always request each ask with its default attributes.","title":"Techread Subcommand"},{"location":"cli/techread.html#available-commands","text":"The sniplet below gives you an overview over the available commands. You can obtain the same output by calling w24cli techread --help . usage: w24cli techread [-h] [--ask-techread-started] [--ask-page-thumbnail] [--ask-sheet-thumbnail] [--ask-sectional-thumbnail] [--ask-variant-measures] input_file positional arguments: input_file path to the file that is to be analyzed optional arguments: -h, --help show this help message and exit --ask-techread-started ask for a callback when the techread process has been picked up by a worker --ask-page-thumbnail ask for a thumbnail for each page in the document --ask-sheet-thumbnail ask for a thumbnail of each sheet in the document --ask-sectional-thumbnail ask for a thumbnail of each sectional of each sheet in the document --ask-variant-measures ask for the measures of each variant","title":"Available Commands"},{"location":"getting_started/authentication.html","text":"Authentication \u00b6 Werk24 uses the AWS Cognito Service to identify a user. We have decided to use on this service, mainly because it provides you with two advantages: The source code that handles the authentication is constantly monitored and improved by a dedicated and highly-specialized team. Many standard libraries exist that handle the authentication process for you. We can provide you with diffent user names for different geographies, allowing you to ensure that your customer's data does not leave its region-of-origin. See General Data Protetion Regulation (GDPR) . Credentials File \u00b6 During the registration process, Werk24 will have provided you with an .werk24 file that contains all the information that is required to authenticate with our API. This file assumes that you have only registered one user with Werk24. The file will look like this W24TECHREAD_AUTH_REGION=\"eu-central-1\" W24TECHREAD_AUTH_CLIENT_ID=\"xxxxxxxxxxxxxxxxxxxxxxxxxx\" W24TECHREAD_AUTH_CLIENT_SECRET=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" W24TECHREAD_AUTH_USERNAME=\"xx@xx.xx\" W24TECHREAD_AUTH_PASSWORD=\"--- INSERT HERE ---\" W24TECHREAD_SERVER_HTTPS=\"techread.w24.io\" W24TECHREAD_SERVER_WSS=\"techread-ws.w24.io\" W24TECHREAD_VERSION=\"v1\" The content of the file will be used when you call the TechreadClient.make_from_env() method.","title":"Authentication"},{"location":"getting_started/authentication.html#authentication","text":"Werk24 uses the AWS Cognito Service to identify a user. We have decided to use on this service, mainly because it provides you with two advantages: The source code that handles the authentication is constantly monitored and improved by a dedicated and highly-specialized team. Many standard libraries exist that handle the authentication process for you. We can provide you with diffent user names for different geographies, allowing you to ensure that your customer's data does not leave its region-of-origin. See General Data Protetion Regulation (GDPR) .","title":"Authentication"},{"location":"getting_started/authentication.html#credentials-file","text":"During the registration process, Werk24 will have provided you with an .werk24 file that contains all the information that is required to authenticate with our API. This file assumes that you have only registered one user with Werk24. The file will look like this W24TECHREAD_AUTH_REGION=\"eu-central-1\" W24TECHREAD_AUTH_CLIENT_ID=\"xxxxxxxxxxxxxxxxxxxxxxxxxx\" W24TECHREAD_AUTH_CLIENT_SECRET=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" W24TECHREAD_AUTH_USERNAME=\"xx@xx.xx\" W24TECHREAD_AUTH_PASSWORD=\"--- INSERT HERE ---\" W24TECHREAD_SERVER_HTTPS=\"techread.w24.io\" W24TECHREAD_SERVER_WSS=\"techread-ws.w24.io\" W24TECHREAD_VERSION=\"v1\" The content of the file will be used when you call the TechreadClient.make_from_env() method.","title":"Credentials File"},{"location":"getting_started/basic_concepts.html","text":"Basic Concepts \u00b6 The Werk24 API uses three simple concepts Drawing Bytes - they tell use what drawing you want to process Asks - they tell us what information you are looking for, and Hooks - they tell the Client how you want to handle the response. Drawing Bytes \u00b6 In order for us to process the file, you need to send it to our API in binary format. You just need to provide us with the binary version of the file and let us worry about the rest. See API/Drawing Bytes for the list of supported file formats. Asks \u00b6 Asks are your way of telling us what you want to know about the Engineering Drawing. Their naming follows a hierarchical structure. The first keyword after the 'Ask' indicate what object you are querying. Example All asks that start with the prefix AskPage... concern the details of the Page. For single-page formats, such as PNG or JPEG, the Page object describes the complete picture, just how you submitted it. In multi-page file formats, requesting a AskPage... will yield a result for each Page in the Document. The following Ask Prefixes exist: AskPage , AskSheet , AskCanvas , AskSectional , and AskVariant . Hooks \u00b6 The Werk24 API is designed to be asyncronous in nature. This allows you to show a PageThumbnail (typically available in 300-500 milliseconds) to your user, while we extract all Measures from the Technical Drawing (can take up to 50 seconds for complex files). To keep your own code base as simple as possible, we use the Hook concept, that simply associtates the Ask with a function that shall be called when the information becomes available. Say, you want to (i) save a page thumbnail and (ii) print the measures on the terminal. Then you would define the following hook Python hooks = [ Hook ( ask = W24AskPageThumbnail (), function = save_file ), Hook ( ask = W24AskVariantMeasures (), function = print ) ] NodeJS const hooks = [ new werk24 . Hook ( new askLib . W24AskPageThumbnail (), saveFile ) new werk24 . Hook ( new askLib . W24AskVariantMeasures (), console . log ), ];","title":"Basic Concepts"},{"location":"getting_started/basic_concepts.html#basic-concepts","text":"The Werk24 API uses three simple concepts Drawing Bytes - they tell use what drawing you want to process Asks - they tell us what information you are looking for, and Hooks - they tell the Client how you want to handle the response.","title":"Basic Concepts"},{"location":"getting_started/basic_concepts.html#drawing-bytes","text":"In order for us to process the file, you need to send it to our API in binary format. You just need to provide us with the binary version of the file and let us worry about the rest. See API/Drawing Bytes for the list of supported file formats.","title":"Drawing Bytes"},{"location":"getting_started/basic_concepts.html#asks","text":"Asks are your way of telling us what you want to know about the Engineering Drawing. Their naming follows a hierarchical structure. The first keyword after the 'Ask' indicate what object you are querying. Example All asks that start with the prefix AskPage... concern the details of the Page. For single-page formats, such as PNG or JPEG, the Page object describes the complete picture, just how you submitted it. In multi-page file formats, requesting a AskPage... will yield a result for each Page in the Document. The following Ask Prefixes exist: AskPage , AskSheet , AskCanvas , AskSectional , and AskVariant .","title":"Asks"},{"location":"getting_started/basic_concepts.html#hooks","text":"The Werk24 API is designed to be asyncronous in nature. This allows you to show a PageThumbnail (typically available in 300-500 milliseconds) to your user, while we extract all Measures from the Technical Drawing (can take up to 50 seconds for complex files). To keep your own code base as simple as possible, we use the Hook concept, that simply associtates the Ask with a function that shall be called when the information becomes available. Say, you want to (i) save a page thumbnail and (ii) print the measures on the terminal. Then you would define the following hook Python hooks = [ Hook ( ask = W24AskPageThumbnail (), function = save_file ), Hook ( ask = W24AskVariantMeasures (), function = print ) ] NodeJS const hooks = [ new werk24 . Hook ( new askLib . W24AskPageThumbnail (), saveFile ) new werk24 . Hook ( new askLib . W24AskVariantMeasures (), console . log ), ];","title":"Hooks"},{"location":"getting_started/quickstart.html","text":"Getting Started \u00b6 Werk24 is designed to make your life with handling Technical Drawings as convenient as possible. This Tutorial will get you set up. We will: Install the Client Store the Credentials Test the Client Install the Client \u00b6 Werk24 provides an easy-to-use and easy-to-extend Python-based client. Install our Python Client using pip or npm. Python pip install werk24 NodeJS bash npm install werk24 pip install werk24 Note Should you be interested in a Client for a different language, please get in touch with us at info@werk24.biz. Configure the Client \u00b6 The Client uses AWS Cognito to handle Authentication. This has several advantages: Security updates are handled by a dedicated team Standard libraries are available for a large range of languages You will be able to maintain individual accounts for your own customers. During the registration process we provide you with a .werk24 file, that contains all the information that you will need. It will look similar to this: W24TECHREAD_AUTH_REGION=\"eu-central-1\" W24TECHREAD_AUTH_CLIENT_ID=\"xxxxxxxxxxxxxxxxxxxxxxxxxx\" W24TECHREAD_AUTH_CLIENT_SECRET=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" W24TECHREAD_AUTH_USERNAME=\"xx@xx.xx\" W24TECHREAD_AUTH_PASSWORD=\"--- INSERT HERE ---\" W24TECHREAD_SERVER_HTTPS=\"techread.w24.io\" W24TECHREAD_SERVER_WSS=\"techread-ws.w24.io\" W24TECHREAD_VERSION=\"v1\" Important When you choose to use your .werk24 file directly, add .werk24 to your .gitignore file to ensure that the credentials remain stored locally. For production environments we strongly recommend setting the credentials as ENVIRONMENT VARIABLES. For more details see Authentication Test the Client \u00b6 You can check whether client is installed and configured correctly by submitting a simple Techread request through the CLI. The request submits the technical drawing to the API and returns a thumbnail of the individual sectionals. To be able to see the image, ensure that you have the Pillow package installed. pip install Pillow After that you can submit the request by running w24cli techread --ask-page-thumbnail ./your-file.pdf You should now see one or more images of the individual cuts on your Technical Drawing. Have a look at the additional details at the CLI Documentation .","title":"Getting Started"},{"location":"getting_started/quickstart.html#getting-started","text":"Werk24 is designed to make your life with handling Technical Drawings as convenient as possible. This Tutorial will get you set up. We will: Install the Client Store the Credentials Test the Client","title":"Getting Started"},{"location":"getting_started/quickstart.html#install-the-client","text":"Werk24 provides an easy-to-use and easy-to-extend Python-based client. Install our Python Client using pip or npm. Python pip install werk24 NodeJS bash npm install werk24 pip install werk24 Note Should you be interested in a Client for a different language, please get in touch with us at info@werk24.biz.","title":"Install the Client"},{"location":"getting_started/quickstart.html#configure-the-client","text":"The Client uses AWS Cognito to handle Authentication. This has several advantages: Security updates are handled by a dedicated team Standard libraries are available for a large range of languages You will be able to maintain individual accounts for your own customers. During the registration process we provide you with a .werk24 file, that contains all the information that you will need. It will look similar to this: W24TECHREAD_AUTH_REGION=\"eu-central-1\" W24TECHREAD_AUTH_CLIENT_ID=\"xxxxxxxxxxxxxxxxxxxxxxxxxx\" W24TECHREAD_AUTH_CLIENT_SECRET=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" W24TECHREAD_AUTH_USERNAME=\"xx@xx.xx\" W24TECHREAD_AUTH_PASSWORD=\"--- INSERT HERE ---\" W24TECHREAD_SERVER_HTTPS=\"techread.w24.io\" W24TECHREAD_SERVER_WSS=\"techread-ws.w24.io\" W24TECHREAD_VERSION=\"v1\" Important When you choose to use your .werk24 file directly, add .werk24 to your .gitignore file to ensure that the credentials remain stored locally. For production environments we strongly recommend setting the credentials as ENVIRONMENT VARIABLES. For more details see Authentication","title":"Configure the Client"},{"location":"getting_started/quickstart.html#test-the-client","text":"You can check whether client is installed and configured correctly by submitting a simple Techread request through the CLI. The request submits the technical drawing to the API and returns a thumbnail of the individual sectionals. To be able to see the image, ensure that you have the Pillow package installed. pip install Pillow After that you can submit the request by running w24cli techread --ask-page-thumbnail ./your-file.pdf You should now see one or more images of the individual cuts on your Technical Drawing. Have a look at the additional details at the CLI Documentation .","title":"Test the Client"},{"location":"models/w24chamfer.html","text":"W24Chamfer \u00b6 PAYLOAD DICT EXAMPLE blurb ( str ) String representation of the item for human consumption 45\u00b0 angle ( float ) Chamfer angle in degrees NOTE: If you are dealing with GON, let us know. Happy to do exend the API for the pleasure of dealing with the concept. 45.0","title":"W24Chamfer"},{"location":"models/w24chamfer.html#w24chamfer","text":"PAYLOAD DICT EXAMPLE blurb ( str ) String representation of the item for human consumption 45\u00b0 angle ( float ) Chamfer angle in degrees NOTE: If you are dealing with GON, let us know. Happy to do exend the API for the pleasure of dealing with the concept. 45.0","title":"W24Chamfer"},{"location":"models/w24gdt.html","text":"W24GDT \u00b6 Parent object for Geometric Dimensionsing and Toleration Frames, attaching them to the pixel location on the drawing. PAYLOAD DICT EXAMPLE bounding_polygon ( List[Tuple[float, float]] ) Bounding polygon of the GDT annotation as tuple of x, y coordinates in the pixel coordinate system of the sectional. NOTE: simple GDTs are represented by a simple rectangle.To support more complex GDTs (e.g., with a Sectional Plane Indicator, we define a polygon) NOTE: the polygon starts at the top left and is oriented clock-wise. [(0.1,0.5), (0.2,0.5), (0.2,0.45), (0.1,0.45)] frame ( W24GDTFrame ) Details on the GDT Frame see W24GDTFrame measure_label ( Optional[W24MeasureLabel] ) Optional size dimension, typically annotated above the feature control frame. Example: \u230012.0 + /- 0.1 [\u22a5|\u23000.1\u24c2| A] See W24Measure Note The GD&Ts also decribe Sectional Plane Indicators (e.g., \u27e8[\u2225| A]), Orientational Plane Indicators (e.g., \u27e8[\u2225| A]\u27e9), Directional Feature Indicators (e.g., \u2190[\u2225| A]) and Collection Plane Indicators (e.g., \u25ef[\u2225| B]). These attributes are currently not available.","title":"W24GDT"},{"location":"models/w24gdt.html#w24gdt","text":"Parent object for Geometric Dimensionsing and Toleration Frames, attaching them to the pixel location on the drawing. PAYLOAD DICT EXAMPLE bounding_polygon ( List[Tuple[float, float]] ) Bounding polygon of the GDT annotation as tuple of x, y coordinates in the pixel coordinate system of the sectional. NOTE: simple GDTs are represented by a simple rectangle.To support more complex GDTs (e.g., with a Sectional Plane Indicator, we define a polygon) NOTE: the polygon starts at the top left and is oriented clock-wise. [(0.1,0.5), (0.2,0.5), (0.2,0.45), (0.1,0.45)] frame ( W24GDTFrame ) Details on the GDT Frame see W24GDTFrame measure_label ( Optional[W24MeasureLabel] ) Optional size dimension, typically annotated above the feature control frame. Example: \u230012.0 + /- 0.1 [\u22a5|\u23000.1\u24c2| A] See W24Measure Note The GD&Ts also decribe Sectional Plane Indicators (e.g., \u27e8[\u2225| A]), Orientational Plane Indicators (e.g., \u27e8[\u2225| A]\u27e9), Directional Feature Indicators (e.g., \u2190[\u2225| A]) and Collection Plane Indicators (e.g., \u25ef[\u2225| B]). These attributes are currently not available.","title":"W24GDT"},{"location":"models/w24gdt_characteristic.html","text":"W24GDTCharacteristic \u00b6 Key Value Unicode Value FORM_STRAIGHTNESS \"\u23e4\" U+23E4 FORM_FLATNESS \"\u23e5\" U+25B1 FORM_CIRCULARITY \"\u25cb\" U+25CB FORM_CYLINDRICITY \"\u232d\" U+232D PROFILE_OF_SURFACE \"\u2313\" U+2313 PROFILE_OF_LINE \"\u2312\" U+2312 ORIENTATION_PERPENDICULARITY \"\u27c2\" U+27C2 ORIENTATION_ANGULARITY \"\u2220\" U+2220 ORIENTATION_PARALLELISM \"\u2225\" U+2225 LOCATION_POSITION \"\u2316\" U+2316 LOCATION_CONCENTRICITY \"\u25ce\" U+25CE LOCATION_SYMMETRY \"\u232f\" U+232F RUNOUT_CIRCULAR \"\u2197\" U+2197 RUNOUT_TOTAL \"\u2330\" U+2330 DATUM_INDICATOR \"[DATUM]\"","title":"W24GDTCharacteristic"},{"location":"models/w24gdt_characteristic.html#w24gdtcharacteristic","text":"Key Value Unicode Value FORM_STRAIGHTNESS \"\u23e4\" U+23E4 FORM_FLATNESS \"\u23e5\" U+25B1 FORM_CIRCULARITY \"\u25cb\" U+25CB FORM_CYLINDRICITY \"\u232d\" U+232D PROFILE_OF_SURFACE \"\u2313\" U+2313 PROFILE_OF_LINE \"\u2312\" U+2312 ORIENTATION_PERPENDICULARITY \"\u27c2\" U+27C2 ORIENTATION_ANGULARITY \"\u2220\" U+2220 ORIENTATION_PARALLELISM \"\u2225\" U+2225 LOCATION_POSITION \"\u2316\" U+2316 LOCATION_CONCENTRICITY \"\u25ce\" U+25CE LOCATION_SYMMETRY \"\u232f\" U+232F RUNOUT_CIRCULAR \"\u2197\" U+2197 RUNOUT_TOTAL \"\u2330\" U+2330 DATUM_INDICATOR \"[DATUM]\"","title":"W24GDTCharacteristic"},{"location":"models/w24gdt_datum.html","text":"W24GDTDatum \u00b6 Preliminary implementation of the GD&T Datum Note future implementations might allow fine-grained access to the attributes of complex names: e.g., (A-B-C-D)[CM] PAYLOAD DICT EXAMPLE blurb ( str ) Reference name. Typically: A,B,C ... Can also contain more complex names, e.g., (A-B-C-D)[CM] \"A\"","title":"W24GDTDatum"},{"location":"models/w24gdt_datum.html#w24gdtdatum","text":"Preliminary implementation of the GD&T Datum Note future implementations might allow fine-grained access to the attributes of complex names: e.g., (A-B-C-D)[CM] PAYLOAD DICT EXAMPLE blurb ( str ) Reference name. Typically: A,B,C ... Can also contain more complex names, e.g., (A-B-C-D)[CM] \"A\"","title":"W24GDTDatum"},{"location":"models/w24gdt_feature_associated.html","text":"W24GDTFeatureAssociated \u00b6 Enum of all associated toleranced features Key Value Unicode Value MINIMAX \"\u24b8\" U+24B8 GAUSSIAN \"\u24bc\" U+24BC MIN_CIRCUMSCRIBED \"\u24c3\" U+24C3 MAX_CIRCUMSCRIBED \"\u24cd\" U+24CD TANGENT \"\u24c9\" U+24C9","title":"W24GDTFeatureAssociated"},{"location":"models/w24gdt_feature_associated.html#w24gdtfeatureassociated","text":"Enum of all associated toleranced features Key Value Unicode Value MINIMAX \"\u24b8\" U+24B8 GAUSSIAN \"\u24bc\" U+24BC MIN_CIRCUMSCRIBED \"\u24c3\" U+24C3 MAX_CIRCUMSCRIBED \"\u24cd\" U+24CD TANGENT \"\u24c9\" U+24C9","title":"W24GDTFeatureAssociated"},{"location":"models/w24gdt_feature_derived.html","text":"W24GDTFeatureDerived \u00b6 Enum of all derived toleranced features Key Value Unicode Value PROJECTED \"\u24c5\" U+24C5 MEAN \"\u24b6\" U+24B6","title":"W24GDTFeatureDerived"},{"location":"models/w24gdt_feature_derived.html#w24gdtfeaturederived","text":"Enum of all derived toleranced features Key Value Unicode Value PROJECTED \"\u24c5\" U+24C5 MEAN \"\u24b6\" U+24B6","title":"W24GDTFeatureDerived"},{"location":"models/w24gdt_frame.html","text":"W24GDTFrame \u00b6 Representation of the Geometric Dimensioning and Toleration frame PAYLOAD DICT EXAMPLE gdt_id ( UUID4 ) Unique id of the GDT \"5843d9ca-d4b6-44a6-a152-47d85bf18cb8\" blurb ( str ) String representation of the label for human consumption \"[\u2316|\u23000.3\u24c2|A|B|C]\" characteristic ( W24GDTCharacteristic ) Section for gemetric characteristic e.g.: \u2313 see W24GDTCharacteristic zone_shape ( W24GDTZoneShape ) Tolerance zone: shape e.g, S\u2300 see W24GDTZoneShape zone_value ( Optional[W24GDTZoneValue] ) GDT value: e.g., 0.03 see W24GDTZoneValue zone_combinations ( List[W24GDTZoneCombination] ) Ordered list of zone combinations, e.g., CZ, SZ see W24GDTZoneCombination zone_offset ( Optional[W24GDTZoneOffset] ) Optional specified offset, e.g., UZ-0.2 see W24GDTZoneCombination zone_constraint ( Optional[W24GDTZoneConstraint] ) Optional zone constraint: e.g., OZ, VA see W24GDTZoneConstraint feature_associated ( Optional[W24GDTFeatureAssociated] ) Associated toleraced feature see W24GDTFeatureAssociated feature_derived ( Optional[W24GDTFeatureDerived] ) Derived Feature see W24GDTFeatureDerived reference_association ( Optional[W24GDTReferenceAssociation] ) Derived Feature see W24GDTReferenceAssociation reference_parameter ( Optional[W24GDTReferenceParameter] ) Reference element parameter see W24GDTReferenceParameter material_condition ( Optional[W24GDTMaterialCondition] ) Material condition see W24GDTMaterialCondition material_condition ( Optional[W24GDTState] ) State: FREE or None see W24GDTState data ( List[W24GDTDatum] ) Ordered list of GDT data see W24GDTDatum","title":"W24GDTFrame"},{"location":"models/w24gdt_frame.html#w24gdtframe","text":"Representation of the Geometric Dimensioning and Toleration frame PAYLOAD DICT EXAMPLE gdt_id ( UUID4 ) Unique id of the GDT \"5843d9ca-d4b6-44a6-a152-47d85bf18cb8\" blurb ( str ) String representation of the label for human consumption \"[\u2316|\u23000.3\u24c2|A|B|C]\" characteristic ( W24GDTCharacteristic ) Section for gemetric characteristic e.g.: \u2313 see W24GDTCharacteristic zone_shape ( W24GDTZoneShape ) Tolerance zone: shape e.g, S\u2300 see W24GDTZoneShape zone_value ( Optional[W24GDTZoneValue] ) GDT value: e.g., 0.03 see W24GDTZoneValue zone_combinations ( List[W24GDTZoneCombination] ) Ordered list of zone combinations, e.g., CZ, SZ see W24GDTZoneCombination zone_offset ( Optional[W24GDTZoneOffset] ) Optional specified offset, e.g., UZ-0.2 see W24GDTZoneCombination zone_constraint ( Optional[W24GDTZoneConstraint] ) Optional zone constraint: e.g., OZ, VA see W24GDTZoneConstraint feature_associated ( Optional[W24GDTFeatureAssociated] ) Associated toleraced feature see W24GDTFeatureAssociated feature_derived ( Optional[W24GDTFeatureDerived] ) Derived Feature see W24GDTFeatureDerived reference_association ( Optional[W24GDTReferenceAssociation] ) Derived Feature see W24GDTReferenceAssociation reference_parameter ( Optional[W24GDTReferenceParameter] ) Reference element parameter see W24GDTReferenceParameter material_condition ( Optional[W24GDTMaterialCondition] ) Material condition see W24GDTMaterialCondition material_condition ( Optional[W24GDTState] ) State: FREE or None see W24GDTState data ( List[W24GDTDatum] ) Ordered list of GDT data see W24GDTDatum","title":"W24GDTFrame"},{"location":"models/w24gdt_material_condition.html","text":"W24GDTMaterialCondition \u00b6 Enum for Material Conditions Key Value Desription MAXIMUM \"\u24c2\" Maximum material condition (MMC) MINIMUM \"\u24c1\" Mimimal material condition (LMC) RECIPROCITY \"\u24c7\" Reciprocity","title":"W24GDTMaterialCondition"},{"location":"models/w24gdt_material_condition.html#w24gdtmaterialcondition","text":"Enum for Material Conditions Key Value Desription MAXIMUM \"\u24c2\" Maximum material condition (MMC) MINIMUM \"\u24c1\" Mimimal material condition (LMC) RECIPROCITY \"\u24c7\" Reciprocity","title":"W24GDTMaterialCondition"},{"location":"models/w24gdt_reference_association.html","text":"W24GDTReferenceAssociation \u00b6 Association of the Reference Element Key Value Desription MINIMAX \"C\" Minimax (Tschebyschew-) Element without contraint MINIMAX_EXTERNAL \"CE\" Minimax (Tschebyschew-) Element with external constraint MINIMAX_INTERNAL \"CI\" Minimal (Tschebyschew-) Element with internal constraint GAUSSIAN \"G\" Gaussian Least Square Element without constraint GAUSSIAN_EXTERNAL \"GE\" Gaussian Least Square Element with external constraint GAUSSIAN_INTERNAL \"GI\" Gaussian Least Square Element with external constraint MIN_CIRCUMSCRIBED \"N\" Minimal circumscribed element MAX_CIRCUMSCRIBED \"X\" Maximal circumscribed element","title":"W24GDTReferenceAssociation"},{"location":"models/w24gdt_reference_association.html#w24gdtreferenceassociation","text":"Association of the Reference Element Key Value Desription MINIMAX \"C\" Minimax (Tschebyschew-) Element without contraint MINIMAX_EXTERNAL \"CE\" Minimax (Tschebyschew-) Element with external constraint MINIMAX_INTERNAL \"CI\" Minimal (Tschebyschew-) Element with internal constraint GAUSSIAN \"G\" Gaussian Least Square Element without constraint GAUSSIAN_EXTERNAL \"GE\" Gaussian Least Square Element with external constraint GAUSSIAN_INTERNAL \"GI\" Gaussian Least Square Element with external constraint MIN_CIRCUMSCRIBED \"N\" Minimal circumscribed element MAX_CIRCUMSCRIBED \"X\" Maximal circumscribed element","title":"W24GDTReferenceAssociation"},{"location":"models/w24gdt_reference_parameter.html","text":"W24GDTReferenceParameter \u00b6 Parameter of the reference element Key Value Desription PEAK_VALUE \"P\" Highest value VALLEY_VALUE \"V\" Lowest value DEVISATION_SPAN \"T\" Deviation span STANDARD_DEVIATION \"Q\" Root mean square deviation","title":"W24GDTReferenceParameter"},{"location":"models/w24gdt_reference_parameter.html#w24gdtreferenceparameter","text":"Parameter of the reference element Key Value Desription PEAK_VALUE \"P\" Highest value VALLEY_VALUE \"V\" Lowest value DEVISATION_SPAN \"T\" Deviation span STANDARD_DEVIATION \"Q\" Root mean square deviation","title":"W24GDTReferenceParameter"},{"location":"models/w24gdt_state.html","text":"W24GDTState \u00b6 Enum for the State Note If the free-state is not annotated, the value is set to None Key Value FREE \"\u24bb\"","title":"W24GDTState"},{"location":"models/w24gdt_state.html#w24gdtstate","text":"Enum for the State Note If the free-state is not annotated, the value is set to None Key Value FREE \"\u24bb\"","title":"W24GDTState"},{"location":"models/w24gdt_zone_combination.html","text":"W24GDTZoneCombination \u00b6 Enum of all tolerance zone combinations Key Value COMBINED \"CZ\" SEPARATED \"SZ\"","title":"W24GDTZoneCombination"},{"location":"models/w24gdt_zone_combination.html#w24gdtzonecombination","text":"Enum of all tolerance zone combinations Key Value COMBINED \"CZ\" SEPARATED \"SZ\"","title":"W24GDTZoneCombination"},{"location":"models/w24gdt_zone_constraint.html","text":"W24GDTZoneConstraint \u00b6 Enum of the Zone Contraints Key Value UNSPECIFIED_INCLINATION \"OZ\" UNSPECIFIED_OFFSET \"VA\"","title":"W24GDTZoneConstraint"},{"location":"models/w24gdt_zone_constraint.html#w24gdtzoneconstraint","text":"Enum of the Zone Contraints Key Value UNSPECIFIED_INCLINATION \"OZ\" UNSPECIFIED_OFFSET \"VA\"","title":"W24GDTZoneConstraint"},{"location":"models/w24gdt_zone_offset.html","text":"W24GDTZoneOffset \u00b6 Specified offset indicated by leading UZ... PAYLOAD DICT EXAMPLE blurb ( str ) blurb of the specified offset for human consumption. \"UZ+0.15\"","title":"W24GDTZoneOffset"},{"location":"models/w24gdt_zone_offset.html#w24gdtzoneoffset","text":"Specified offset indicated by leading UZ... PAYLOAD DICT EXAMPLE blurb ( str ) blurb of the specified offset for human consumption. \"UZ+0.15\"","title":"W24GDTZoneOffset"},{"location":"models/w24gdt_zone_shape.html","text":"W24GDTZoneShape \u00b6 Enum of all zone shapes Key Value DIAMETER \"\u00d8\" DIAMETER_SPHERE \"S\u2300\"","title":"W24GDTZoneShape"},{"location":"models/w24gdt_zone_shape.html#w24gdtzoneshape","text":"Enum of all zone shapes Key Value DIAMETER \"\u00d8\" DIAMETER_SPHERE \"S\u2300\"","title":"W24GDTZoneShape"},{"location":"models/w24gdt_zone_value.html","text":"W24GDTZoneValue \u00b6 Defintion of the GDT Zone Value PAYLOAD DICT EXAMPLE blurb ( str ) String representation for human consumption \"0.05/12x10\u00b0\" width_min ( float ) Minimal GD&T Zone Value Width 10.0 width_max ( float ) Maximal GD&T Zone Value Width 20.0 extend_min ( float ) Minimal GD&T Zone Value Extend 12.0 extend_max ( float ) Maximal GD&T Zone Value Extend 25.0 extend_angle ( float ) Optional angle of the extend spacing 10","title":"W24GDTZone"},{"location":"models/w24gdt_zone_value.html#w24gdtzonevalue","text":"Defintion of the GDT Zone Value PAYLOAD DICT EXAMPLE blurb ( str ) String representation for human consumption \"0.05/12x10\u00b0\" width_min ( float ) Minimal GD&T Zone Value Width 10.0 width_max ( float ) Maximal GD&T Zone Value Width 20.0 extend_min ( float ) Minimal GD&T Zone Value Extend 12.0 extend_max ( float ) Maximal GD&T Zone Value Extend 25.0 extend_angle ( float ) Optional angle of the extend spacing 10","title":"W24GDTZoneValue"},{"location":"models/w24measure.html","text":"PAYLOAD DICT EXAMPLE measure_id ( UUID4 ) Unqiue UUID that identifies the measure \"15012f90-f755-48cf-b121-7542e88b9ec8\" line ( Tuple[Tuple[float,float],Tuple[float,float]] ) Tuple of the measure's start- and end-coordinates in the Pixel Coordinate system of the sectional. The coordinates are normalized by the width and height of the associated object (e.g., the sectional). If you want to obtain the absolute position in the original image, you need to consider the following offsets: sectional + canvas + sheet. ((0.1,0.5),(0.2,0.5)) label ( W24MeasureLabel ) Details on the Measure Label See W24MeasureLabel warnings ( List[W24MeasureWarning] ) - List of Warnings that are associated with the measure. See W24MeasureWarning for details [] confidence ( float ) - Werk24 calculates an internal confidence score for each measure. Depending on your use-case, you might want to consider or discard low-confidence measures. This value allows you to do so. The value ranges from 0.0 to 1.0 0.93","title":"W24Measure"},{"location":"models/w24measure_label.html","text":"PAYLOAD DICT EXAMPLE blurb ( str ) String representation of the item for human consumption 17k6 size ( W24Size ) Size of the MeasureLabel. Any of W24SizeNominal , W24SizeDiameter , and W24SizeAccrossFlats See W24Size for details size_tolerance ( W24SizeTolerance ) Tolerance details. Default: General tolerances. NOTE: by default we are refering to the general tolerances of the drawing. Currently the W24SizeToleranceGeneral object is a stub. Future implementations might go one step further and quote the applicable general tolerance as refered to in the data fields. NOTE: if the W24MeasureLabel describes a \"Theoretically Exact Measure\", i.e, the label is surrounded by a box, like: \"[15]\", the size_tolerance refers to a W24SizeToleranceTheoreticallyExact object (and is NOT None) See W24SizeTolerance for details thread ( W24Thread ) NOTE: the thread details describe the complete thread description and follow the respective standards. In consequence, the thread diameter of an ISO-thread will be indicated in millimeter, while the thread diameter of an UTS thread will be in inch. See W24Thread for details quantity ( int ) Quantity for spacings. NOTE: Currently only the indicated measure will be detected and returned. Future implementation could detect the spacings and return individual measures for the respective spacings. When we implement this feature, we will add an attribute to the ASK, which allows you to control the behavior. \u00d82.5 (2x) will yield quantity=2 chamfer ( W24Chamfer ) Optional Chamfer See W24Chamfer for details","title":"W24MeasureLabel"},{"location":"models/w24size.html","text":"W24Size \u00b6 W24Size objects describe different types of distances on the Technical Drawing. The following types are implemented * W24SizeNominal - just a nominal distance between two points * W24SizeDiameter - a distance measure, that actually defines a complete circle * W24SizeWidthAcrossFlats - a distance measure, that potentially describes a hexagon. W24SizeNominal \u00b6 PAYLOAD DICT EXAMPLE blurb ( str ) String representation of the item for human consumption 2.5 size_type ( W24SizeType ) SizeType for deserialization. W24SizeType.NOMINAL nominal_size ( float ) Nominal size. 2.5 W24SizeDiameter \u00b6 PAYLOAD DICT EXAMPLE blurb ( str ) String representation of the item for human consumption \u00d82.5 size_type ( W24SizeType ) SizeType for deserialization. W24SizeType.DIAMETER nominal_size ( float ) Nominal size. 2.5 W24SizeWidthAcrossFlats \u00b6 Widths accross flats are typically annotated with a leading 'SW' (example SW11) and can (not always) describe a hexagon shape. Contrary to its name, the measure can positioned in two ways (see drawing below). If the measure is positioned accross edges (example (a)), the width_accross_flats will return the indicated value (here 11), while the norminal size will return the actually annotated distance on the image (here 12.7). PAYLOAD DICT EXAMPLE blurb ( str ) String representation of the item for human consumption SW11 size_type ( W24SizeType ) SizeType for deserialization. W24SizeType.DIAMETER nominal_size ( float ) Nominal size. 12.7 / 11 width_accross_flats ( float ) Size accross flats or Wrench sizes. 11","title":"W24Size"},{"location":"models/w24size.html#w24size","text":"W24Size objects describe different types of distances on the Technical Drawing. The following types are implemented * W24SizeNominal - just a nominal distance between two points * W24SizeDiameter - a distance measure, that actually defines a complete circle * W24SizeWidthAcrossFlats - a distance measure, that potentially describes a hexagon.","title":"W24Size"},{"location":"models/w24size.html#w24sizenominal","text":"PAYLOAD DICT EXAMPLE blurb ( str ) String representation of the item for human consumption 2.5 size_type ( W24SizeType ) SizeType for deserialization. W24SizeType.NOMINAL nominal_size ( float ) Nominal size. 2.5","title":"W24SizeNominal"},{"location":"models/w24size.html#w24sizediameter","text":"PAYLOAD DICT EXAMPLE blurb ( str ) String representation of the item for human consumption \u00d82.5 size_type ( W24SizeType ) SizeType for deserialization. W24SizeType.DIAMETER nominal_size ( float ) Nominal size. 2.5","title":"W24SizeDiameter"},{"location":"models/w24size.html#w24sizewidthacrossflats","text":"Widths accross flats are typically annotated with a leading 'SW' (example SW11) and can (not always) describe a hexagon shape. Contrary to its name, the measure can positioned in two ways (see drawing below). If the measure is positioned accross edges (example (a)), the width_accross_flats will return the indicated value (here 11), while the norminal size will return the actually annotated distance on the image (here 12.7). PAYLOAD DICT EXAMPLE blurb ( str ) String representation of the item for human consumption SW11 size_type ( W24SizeType ) SizeType for deserialization. W24SizeType.DIAMETER nominal_size ( float ) Nominal size. 12.7 / 11 width_accross_flats ( float ) Size accross flats or Wrench sizes. 11","title":"W24SizeWidthAcrossFlats"},{"location":"models/w24size_tolerance.html","text":"W24SizeToleranceFitsizeISO \u00b6 Fitsize tolerances following the DIN EN ISO 286-1 system. PAYLOAD DICT EXAMPLE blurb str String representation of the item for human consumption k7 toleration_type W24SizeToleranceType W24SizeToleranceType for deserialization W24SizeToleranceType.FIT_SIZE_ISO W24SizeToleranceOffSize \u00b6 PAYLOAD DICT EXAMPLE blurb str String representation of the item for human consumption 0.5/-0.2 toleration_type W24SizeToleranceType W24SizeToleranceType for deserialization W24SizeToleranceType.OFF_SIZE deviation_lower float Lower deviation from the nominal size 0.5 deviation_upper float Upper deviation from the nominal size -0.2 W24SizeToleranceGeneral \u00b6 Indicates that the General Tolerances apply. The General Tolerances are typically defined on the Title Block. At this stage, we do not extract the information from the title block. If this is relevant to you, let us know. PAYLOAD DICT EXAMPLE blurb str String representation of the item for human consumption 0.5/-0.2 toleration_type W24SizeToleranceType W24SizeToleranceType for deserialization W24SizeToleranceType.OFF_SIZE W24SizeToleranceTheoreticallyExact \u00b6 Theoretically Exact Measures after ISO 5458 must not be tolerated. They are indicated by a small rectangular frame. Example: +------+ | 15 | +------+ NOTE: In practice, we see Technical drawings contain tolerated, theoretically exact measures. Example: +------------+ | 15 +/- 0.2 | +------------+ In these situations the toleration takes priority. PAYLOAD DICT EXAMPLE toleration_type W24SizeToleranceType W24SizeToleranceType for deserialization W24SizeToleranceType.THEORETICALLY_EXACT W24SizeToleranceMinimum \u00b6 Some drawings indiate a minimal length for some measures. Example: min. 20 In this case we will return a W24SizeToleranceMinimum. PAYLOAD DICT EXAMPLE toleration_type W24SizeToleranceType W24SizeToleranceType for deserialization W24SizeToleranceType.MINIMUM W24SizeToleranceMaximum \u00b6 Some drawings indiate a maximal length for some measures. Example: max. 20 In this case we will return a W24SizeToleranceMaximum. PAYLOAD DICT EXAMPLE toleration_type W24SizeToleranceType W24SizeToleranceType for deserialization W24SizeToleranceType.MAXIMUM W24SizeToleranceApproximation \u00b6 Some drawings indiate an approximate length for some measures. Example: ~ 20 In this case we will return a W24SizeToleranceApproximation. PAYLOAD DICT EXAMPLE toleration_type W24SizeToleranceType W24SizeToleranceType for deserialization W24SizeToleranceType.APPROXIMATION","title":"W24SizeTolerance"},{"location":"models/w24size_tolerance.html#w24sizetolerancefitsizeiso","text":"Fitsize tolerances following the DIN EN ISO 286-1 system. PAYLOAD DICT EXAMPLE blurb str String representation of the item for human consumption k7 toleration_type W24SizeToleranceType W24SizeToleranceType for deserialization W24SizeToleranceType.FIT_SIZE_ISO","title":"W24SizeToleranceFitsizeISO"},{"location":"models/w24size_tolerance.html#w24sizetoleranceoffsize","text":"PAYLOAD DICT EXAMPLE blurb str String representation of the item for human consumption 0.5/-0.2 toleration_type W24SizeToleranceType W24SizeToleranceType for deserialization W24SizeToleranceType.OFF_SIZE deviation_lower float Lower deviation from the nominal size 0.5 deviation_upper float Upper deviation from the nominal size -0.2","title":"W24SizeToleranceOffSize"},{"location":"models/w24size_tolerance.html#w24sizetolerancegeneral","text":"Indicates that the General Tolerances apply. The General Tolerances are typically defined on the Title Block. At this stage, we do not extract the information from the title block. If this is relevant to you, let us know. PAYLOAD DICT EXAMPLE blurb str String representation of the item for human consumption 0.5/-0.2 toleration_type W24SizeToleranceType W24SizeToleranceType for deserialization W24SizeToleranceType.OFF_SIZE","title":"W24SizeToleranceGeneral"},{"location":"models/w24size_tolerance.html#w24sizetolerancetheoreticallyexact","text":"Theoretically Exact Measures after ISO 5458 must not be tolerated. They are indicated by a small rectangular frame. Example: +------+ | 15 | +------+ NOTE: In practice, we see Technical drawings contain tolerated, theoretically exact measures. Example: +------------+ | 15 +/- 0.2 | +------------+ In these situations the toleration takes priority. PAYLOAD DICT EXAMPLE toleration_type W24SizeToleranceType W24SizeToleranceType for deserialization W24SizeToleranceType.THEORETICALLY_EXACT","title":"W24SizeToleranceTheoreticallyExact"},{"location":"models/w24size_tolerance.html#w24sizetoleranceminimum","text":"Some drawings indiate a minimal length for some measures. Example: min. 20 In this case we will return a W24SizeToleranceMinimum. PAYLOAD DICT EXAMPLE toleration_type W24SizeToleranceType W24SizeToleranceType for deserialization W24SizeToleranceType.MINIMUM","title":"W24SizeToleranceMinimum"},{"location":"models/w24size_tolerance.html#w24sizetolerancemaximum","text":"Some drawings indiate a maximal length for some measures. Example: max. 20 In this case we will return a W24SizeToleranceMaximum. PAYLOAD DICT EXAMPLE toleration_type W24SizeToleranceType W24SizeToleranceType for deserialization W24SizeToleranceType.MAXIMUM","title":"W24SizeToleranceMaximum"},{"location":"models/w24size_tolerance.html#w24sizetoleranceapproximation","text":"Some drawings indiate an approximate length for some measures. Example: ~ 20 In this case we will return a W24SizeToleranceApproximation. PAYLOAD DICT EXAMPLE toleration_type W24SizeToleranceType W24SizeToleranceType for deserialization W24SizeToleranceType.APPROXIMATION","title":"W24SizeToleranceApproximation"},{"location":"models/w24thread.html","text":"W24ThreadISOMetric \u00b6 Metric ISO Thread following ISO 1502 Supports: DIN 14-1 threads (i.e., diameter < 1mm) DIN 13-1 threads (i.e., diameter 1..68mm) DIN 13-2 to DIN 13-10 threads (i.e., diameter 1..1000mm) DIN 158-1 (i.e., cone-shaped threads) PAYLOAD DICT EXAMPLE blurb str string representation for human interpretation M4x1.5 thread_type W24ThreadType thread type to facilitate deserialization ISO_METRIC diameter float Diameter of the thread in mm. NOTE: The norms range from 0.1 to 1000mm; however, diameters outside that range are possible (and occur) 4 pitch float Pitch of the thread in mm. Normed range: 0.25 - 9mm. NOTE: the value will only be set if is explicitly stated in the drawing. This behaviour might change in the future and perform an automatic lookup in the DIN standards. If this change would affect your application, please get in touch with us. 1.5 handedness W24ThreadHandedness Left of right-handedness of the thread. This will be RIGHT unless explicitly described as LEFT in the drawing W24ThreadHandedness.RIGHT W24ThreadUTS \u00b6 Unified Thread Standard (UTS) base class for UNC - Unified National Coarse Thread UNF - Unified National Fine Thread UNEF - Unified National Extrafine Thread PAYLOAD DICT EXAMPLE blurb str string representation for human interpretation #0, 1 3/4\" thread_type W24ThreadType thread type to facilitate deserialization UTS_COARSE / UTS_FINE / UTS_EXTRAFINE / UTS_SPECIAL uts_size str UTS size as string representation. Threads with a diameter < 0.25 inch are written with a leading '#'. Threads with a diameter >= 0.25 inch are represented as fractions with a tailing '\"' #0, 1 3/4\" diameter float Diameter of the thread in mm. 4 threads_per_inch float --Threads per inch NOTE: The float (rather than int) is chosen to support non-convertional threads as well. 3 tolerance_class str Tolerance class. Options: 1A, 2A, 3A for external threads and 1B, 2B, 3B for internal threads 1A W24ThreadWhitworth \u00b6 Whitworth Thread following ISO 228-1 PAYLOAD DICT EXAMPLE blurb str string representation for human interpretation G3/4 thread_type W24ThreadType thread type to facilitate deserialization WHITWORTH diameter float Diameter of the thread in mm. 4 whitworth_size float Size number (for historic reasons not proportional to size) 0.75","title":"W24Thread"},{"location":"models/w24thread.html#w24threadisometric","text":"Metric ISO Thread following ISO 1502 Supports: DIN 14-1 threads (i.e., diameter < 1mm) DIN 13-1 threads (i.e., diameter 1..68mm) DIN 13-2 to DIN 13-10 threads (i.e., diameter 1..1000mm) DIN 158-1 (i.e., cone-shaped threads) PAYLOAD DICT EXAMPLE blurb str string representation for human interpretation M4x1.5 thread_type W24ThreadType thread type to facilitate deserialization ISO_METRIC diameter float Diameter of the thread in mm. NOTE: The norms range from 0.1 to 1000mm; however, diameters outside that range are possible (and occur) 4 pitch float Pitch of the thread in mm. Normed range: 0.25 - 9mm. NOTE: the value will only be set if is explicitly stated in the drawing. This behaviour might change in the future and perform an automatic lookup in the DIN standards. If this change would affect your application, please get in touch with us. 1.5 handedness W24ThreadHandedness Left of right-handedness of the thread. This will be RIGHT unless explicitly described as LEFT in the drawing W24ThreadHandedness.RIGHT","title":"W24ThreadISOMetric"},{"location":"models/w24thread.html#w24threaduts","text":"Unified Thread Standard (UTS) base class for UNC - Unified National Coarse Thread UNF - Unified National Fine Thread UNEF - Unified National Extrafine Thread PAYLOAD DICT EXAMPLE blurb str string representation for human interpretation #0, 1 3/4\" thread_type W24ThreadType thread type to facilitate deserialization UTS_COARSE / UTS_FINE / UTS_EXTRAFINE / UTS_SPECIAL uts_size str UTS size as string representation. Threads with a diameter < 0.25 inch are written with a leading '#'. Threads with a diameter >= 0.25 inch are represented as fractions with a tailing '\"' #0, 1 3/4\" diameter float Diameter of the thread in mm. 4 threads_per_inch float --Threads per inch NOTE: The float (rather than int) is chosen to support non-convertional threads as well. 3 tolerance_class str Tolerance class. Options: 1A, 2A, 3A for external threads and 1B, 2B, 3B for internal threads 1A","title":"W24ThreadUTS"},{"location":"models/w24thread.html#w24threadwhitworth","text":"Whitworth Thread following ISO 228-1 PAYLOAD DICT EXAMPLE blurb str string representation for human interpretation G3/4 thread_type W24ThreadType thread type to facilitate deserialization WHITWORTH diameter float Diameter of the thread in mm. 4 whitworth_size float Size number (for historic reasons not proportional to size) 0.75","title":"W24ThreadWhitworth"},{"location":"tutorials/thumbnails.html","text":"Thumbnails \u00b6 There are many reasons why you might want to obtain a Thumbnail of (i) the complete document that you sent us, or (ii) parts of it. Most useful are probably thumbnails of Sectionals . We will thus query the API to return a thumbnail for all sectionals detected in the supplied document. You can obtain thumbnails of the Page , Sheet and Canvas in an analogous manner. Define Query Function \u00b6 Let us start with the communication function. It ... ... defines what information you request ( W24AskSectionalThumbnail ), ... defines what function shall be called when the information becomes available ( handle_thumbnail / handleThumbnail ) ... sends the drawing bytes to the API and initiates the request Python from werk24 import Hook , W24TechreadClient , W24AskSectionalThumbnail async def get_sectional_thumbnails ( drawing_bytes ): hooks = [ Hook ( ask = W24AskSectionalThumbnail (), function = handle_thumbnail )] async with W24TechreadClient . make_from_env () as session : await session . read_drawing_with_hooks ( document_bytes , hooks ) NodeJS async def getSectionalThumbnails ( drawingBytes ) { const askLib = await werk24 . loadAsks (); const hooks = [ new werk24 . Hook ( new askLib . W24AskSectionalThumbnail (), handleThumbnail )]; let client = werk24 . W24TechreadClient . makeFromEnv (); try { await client . getSectionalThumbnails ( drawingBytes , hooks );} catch ( e ) { console . error ( e ); } finally { client . close (); } } import asyncio asyncio.run_until_complete(get_sectional_thumbnails(...)) printMeasuresOfDrawing(...) Define the Response Handler \u00b6 The query function above refered to a function handle_thumbnail / handleThumbnail . It is called as soon as the response becomes available. Attention The handle_thumbnail will be called multiple times! Once for each sectional on the drawing. When handle_thumbnail is called, the Client passes an object of the type W24TechreadMessage . This object has two attributes that we are interested in: payload_dict and payload_bytes . The payload_bytes contain the thumbnail bytes you requested. The payload_dict contains a dictionary that carries the associated response details. In the case of AskSectionalThumbnail , this will for example contain the canvas_id , which allows to differentiate between sectionals that come from different canvases (Remember, a Sheet might contain multiple Canvases ). Python async def handle_thumbnail ( message ): canvas_id = message . payload_dict . get ( 'canvas_id' ) file_preview = message . payload_bytes [: 64 ] print ( f \"Received Sectional Thumbnail of Canvas { canvas_id } \" ) print ( f \"File starts with { file_preview } \" ) NodeJS async def handleThumbnail ( message ) { const canvasId = message . payload_dict . canvas_id const filePreview = message . payload_bytes . substring ( 0 , 64 ) console . log ( `Received Sectional Thumbnail of Canvas ${ canvas_id } ` ) console . log ( `File starts with ${ file_preview } ` ) }","title":"Thumbnails"},{"location":"tutorials/thumbnails.html#thumbnails","text":"There are many reasons why you might want to obtain a Thumbnail of (i) the complete document that you sent us, or (ii) parts of it. Most useful are probably thumbnails of Sectionals . We will thus query the API to return a thumbnail for all sectionals detected in the supplied document. You can obtain thumbnails of the Page , Sheet and Canvas in an analogous manner.","title":"Thumbnails"},{"location":"tutorials/thumbnails.html#define-query-function","text":"Let us start with the communication function. It ... ... defines what information you request ( W24AskSectionalThumbnail ), ... defines what function shall be called when the information becomes available ( handle_thumbnail / handleThumbnail ) ... sends the drawing bytes to the API and initiates the request Python from werk24 import Hook , W24TechreadClient , W24AskSectionalThumbnail async def get_sectional_thumbnails ( drawing_bytes ): hooks = [ Hook ( ask = W24AskSectionalThumbnail (), function = handle_thumbnail )] async with W24TechreadClient . make_from_env () as session : await session . read_drawing_with_hooks ( document_bytes , hooks ) NodeJS async def getSectionalThumbnails ( drawingBytes ) { const askLib = await werk24 . loadAsks (); const hooks = [ new werk24 . Hook ( new askLib . W24AskSectionalThumbnail (), handleThumbnail )]; let client = werk24 . W24TechreadClient . makeFromEnv (); try { await client . getSectionalThumbnails ( drawingBytes , hooks );} catch ( e ) { console . error ( e ); } finally { client . close (); } } import asyncio asyncio.run_until_complete(get_sectional_thumbnails(...)) printMeasuresOfDrawing(...)","title":"Define Query Function"},{"location":"tutorials/thumbnails.html#define-the-response-handler","text":"The query function above refered to a function handle_thumbnail / handleThumbnail . It is called as soon as the response becomes available. Attention The handle_thumbnail will be called multiple times! Once for each sectional on the drawing. When handle_thumbnail is called, the Client passes an object of the type W24TechreadMessage . This object has two attributes that we are interested in: payload_dict and payload_bytes . The payload_bytes contain the thumbnail bytes you requested. The payload_dict contains a dictionary that carries the associated response details. In the case of AskSectionalThumbnail , this will for example contain the canvas_id , which allows to differentiate between sectionals that come from different canvases (Remember, a Sheet might contain multiple Canvases ). Python async def handle_thumbnail ( message ): canvas_id = message . payload_dict . get ( 'canvas_id' ) file_preview = message . payload_bytes [: 64 ] print ( f \"Received Sectional Thumbnail of Canvas { canvas_id } \" ) print ( f \"File starts with { file_preview } \" ) NodeJS async def handleThumbnail ( message ) { const canvasId = message . payload_dict . canvas_id const filePreview = message . payload_bytes . substring ( 0 , 64 ) console . log ( `Received Sectional Thumbnail of Canvas ${ canvas_id } ` ) console . log ( `File starts with ${ file_preview } ` ) }","title":"Define the Response Handler"}]}