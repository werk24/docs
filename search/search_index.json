{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Werk24 Documentation \u00b6 Welcome to the Werk24 documentation. Werk24 allows to easily access the information of your PDF- or Image-based Technical Drawings. Here we cover everything about the product and the python integration. Getting Started \u00b6 To get started, you might find some of these links relevant: New to Werk24? Have a look at the Getting Started No account yet? Get in touch with our sales team at info@werk24.biz Stuck? Feel free to contact our support team at info@werk24.biz","title":"Welcome"},{"location":"#werk24-documentation","text":"Welcome to the Werk24 documentation. Werk24 allows to easily access the information of your PDF- or Image-based Technical Drawings. Here we cover everything about the product and the python integration.","title":"Werk24 Documentation"},{"location":"#getting-started","text":"To get started, you might find some of these links relevant: New to Werk24? Have a look at the Getting Started No account yet? Get in touch with our sales team at info@werk24.biz Stuck? Feel free to contact our support team at info@werk24.biz","title":"Getting Started"},{"location":"api/asks/","text":"mermaid.initialize({startOnLoad:true}); mermaid.sequenceConfig = {</p> <div class=\"codehilite\"><pre><span></span><code>diagramMarginX:50, diagramMarginY:10, boxTextMargin:5, noteMargin:10, messageMargin:35, mirrorActors:true </code></pre></div> <p>}; Asks \u00b6 Asks are your way to tell the Werk24 Techread API what information you would like to learn about the Technical Drawing. We have decided to use this format, as it allows you to specify exactly what you would like to learn about the drawing, and can serve your customer as soon as possible. Time is of the essence! The intend of this page is to give you a brief overview over the available Ask Types. Please refer to the API reference for a full description. graph TD W24Document --1:n--> W24Page W24Page --1:n--> W24TitlePage W24Page --1:n--> W24Sheet W24Page --> PageAsks(\" W24AskPageThumbnail \"):::ask W24Sheet --1:1--> W24VariantTable W24Sheet --1:n--> W24Plane W24Sheet --> SheetAsks(\" W24AskSheetExportOnshape W24AskSheetThumbnail \"):::ask W24Plane -.n:m.-> W24Variant W24VariantTable -.1:m.-> W24Variant W24Variant --> VariantAsks(\" W24AskVariantExportSTL W24AskVariantFinestTolerance W24AskVariantOverallDimensions \"):::ask W24Plane --> PlaneAsks(\" W24AskPlaneThumbnail \"):::ask classDef ask fill:#cad; W24Document & W24Page \u00b6 As the image below illustrates, a W24Document constist of one more multiple W24Pages. You can think of it as the pages in the PDF document that you submitted. If you sent us an image, the W24Document will have exactly one page: your image. Our algorithm automatically assesses the contents of each page and classifies it either as W24TitlePage or W24Sheet . W24AskPageThumbnail \u00b6 The W24AskPageThumbnail will return a thumbnail for each page in the document. The orientation of the thumbnail will follow the orientation of the page in the PDF document. You will receive one AskResponse per W24Page. The Websocket will respond with something along the lines of: { \"message_type\": \"ASK_PAGE_THUMBNAIL\", \"payload_dict\": { \"document_id\": \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\", \"page_id\": \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\", \"page_number\": 1 }, \"payload_url\": \"https://...\" } W24TitlePage \u00b6 Every W24Page that is not classified as Sheet is automatically classified as W24TitlePage. Important If you want to use more information from the title pages, please get in touch with us. Internally we extract the position groups (i.e., the position, description, quantity) from the title pages. We also interpret the description to extract such information as \"Drawing Id\", \"Material\" etc. If you have a good business case for it, we'll be able to make this available to you. W24Sheet \u00b6 If a W24Page contains a Technical Drawing, it will be classified as W24Sheet. W24AskSheetExportOnshape (Experimental) \u00b6 The W24AskSheetExport will export all details (as far as they are understood and implemented) to Onshape , your online CAD Software. Beware that this feature is still experimental, and that the data you export to onshape is currently publically available! You'll need to create your own account with Onshape to enjoy privacy. The Websocket will respond with something along the lines of: { \"message_type\": \"ASK_SHEET_EXPORT_ONSHAPE\", \"payload_dict\": { \"document_id\": \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\", \"page_id\": \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\", \"sheet_id\": \"5bc164d4-df0d-4482-9048-3a84de010abf\", \"onshape_url\":\"https://onshape.com/..\" } } Note Beware that the onshape_url will not be stored in the payload_url, but is an attribute to the payload_dict. W24AskSheetThumbnail \u00b6 The W24AskSheetThumbnail will return a thumbnail for each sheet in the document. The thumbnail will be rotated automatically. The Websocket will respond with something along the lines of: { \"message_type\": \"ASK_SHEET_THUMBNAIL\", \"payload_dict\": { \"document_id\": \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\", \"page_id\": \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\", \"sheet_id\": \"5bc164d4-df0d-4482-9048-3a84de010abf\", }, \"payload_url\": \"https://...\" } W24VariantTable \u00b6 To make life more interesting, some Technical Drawings contain a seperate specification table that typically looks something like this: length width Type A 10 10 +- 0.1 Type B 10 12 +- 0.2 A Sheet that contains such a specification table consequently describes multiple W24Variants; in this case the parts \"Type A\" and \"Type B\". W24Plane \u00b6 W24AskPlaneThumbnail \u00b6 The W24AskPlaneThumbnail will return a thumbnail for each plane on the sheet. This also includes detail drawings. The thumbnail will be rotated automatically. { \"message_type\": \"ASK_PLANE_THUMBNAIL\", \"payload_dict\": { \"document_id\": \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\", \"page_id\": \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\", \"sheet_id\": \"5bc164d4-df0d-4482-9048-3a84de010abf\", \"plane_id\": \"eca7c9f8-6dc2-11ea-bc55-0242ac130003\", }, \"payload_url\": \"https://...\" } W24Variant \u00b6 Each sheet may describe one or more Variants, depending on the precense of a W24VariantTable . You can think of it as a \"fanzy\" description of a Part. In most cases a Technical Drawing will only describe one Variant (i.e., one Part), but we see W24VariantTables in about 2-5% of the files. So be sure to implement the handling of multiple variants. W24AskVariantExportSTL (Experimental) \u00b6 The W24AskVariantExport will return an STL file for each variant that was found on the Sheet. { \"message_type\": \"ASK_VARIANT_EXPORT_STL\", \"payload_dict\": { \"document_id\": \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\", \"page_id\": \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\", \"sheet_id\": \"5bc164d4-df0d-4482-9048-3a84de010abf\", \"variant_id\": \"132ea0e2-6dc3-11ea-bc55-0242ac130003\", }, \"payload_url\": \"https://...\" } W24AskVariantFinestTolerance \u00b6 W24AskVariantFinestTolerance will return the minimal measure tolerances that were found among all measures in the Variant. Here the finest tolerance is understood as the tolerance whose difference between the upper and lower bound is the smallest. Depending on your Drawing, the signs might be +/+, +/- or -/-. { \"message_type\": \"ASK_VARIANT_FINEST_TOLERANCE\", \"payload_dict\": { \"document_id\": \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\", \"page_id\": \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\", \"sheet_id\": \"5bc164d4-df0d-4482-9048-3a84de010abf\", \"variant_id\": \"132ea0e2-6dc3-11ea-bc55-0242ac130003\", \"variant_finest_tolerance\": { \"upper_tolerance\": 0.1, \"lower_tolerance\": -0.05 } } } Note As the tolerances could potentially be specified in the W24VariantTable, you will need to be sure to pick the correct variant. W24AskVariantOverallDimensions \u00b6 The W24AskVariantOverallDimensions will return the overall dimensions for each variant that is found. It will return a W24OverallDimensions object, that contains measures for x, y, z as well as an enum indicating the shape. { \"message_type\": \"ASK_VARIANT_EXPORT_STL\", \"payload_dict\": { \"document_id\": \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\", \"page_id\": \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\", \"sheet_id\": \"5bc164d4-df0d-4482-9048-3a84de010abf\", \"variant_id\": \"132ea0e2-6dc3-11ea-bc55-0242ac130003\", \"variant_overall_dimensions\": { \"x_dimension\": { \"value\": 5, \"tolerance_upper\": 0.5, \"tolerance_lower\": null }, \"y_dimension\": { \"value\": 5, \"tolerance_upper\": 0.5, \"tolerance_lower\": null }, \"z_dimension\": { \"value\": 15, \"tolerance_upper\": 0.5, \"tolerance_lower\": 0.1 }, \"shape\":\"ROD_ROUND\" } } }","title":"Asks"},{"location":"api/asks/#asks","text":"Asks are your way to tell the Werk24 Techread API what information you would like to learn about the Technical Drawing. We have decided to use this format, as it allows you to specify exactly what you would like to learn about the drawing, and can serve your customer as soon as possible. Time is of the essence! The intend of this page is to give you a brief overview over the available Ask Types. Please refer to the API reference for a full description. graph TD W24Document --1:n--> W24Page W24Page --1:n--> W24TitlePage W24Page --1:n--> W24Sheet W24Page --> PageAsks(\" W24AskPageThumbnail \"):::ask W24Sheet --1:1--> W24VariantTable W24Sheet --1:n--> W24Plane W24Sheet --> SheetAsks(\" W24AskSheetExportOnshape W24AskSheetThumbnail \"):::ask W24Plane -.n:m.-> W24Variant W24VariantTable -.1:m.-> W24Variant W24Variant --> VariantAsks(\" W24AskVariantExportSTL W24AskVariantFinestTolerance W24AskVariantOverallDimensions \"):::ask W24Plane --> PlaneAsks(\" W24AskPlaneThumbnail \"):::ask classDef ask fill:#cad;","title":"Asks"},{"location":"api/asks/#w24document-w24page","text":"As the image below illustrates, a W24Document constist of one more multiple W24Pages. You can think of it as the pages in the PDF document that you submitted. If you sent us an image, the W24Document will have exactly one page: your image. Our algorithm automatically assesses the contents of each page and classifies it either as W24TitlePage or W24Sheet .","title":"W24Document &amp; W24Page"},{"location":"api/asks/#w24askpagethumbnail","text":"The W24AskPageThumbnail will return a thumbnail for each page in the document. The orientation of the thumbnail will follow the orientation of the page in the PDF document. You will receive one AskResponse per W24Page. The Websocket will respond with something along the lines of: { \"message_type\": \"ASK_PAGE_THUMBNAIL\", \"payload_dict\": { \"document_id\": \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\", \"page_id\": \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\", \"page_number\": 1 }, \"payload_url\": \"https://...\" }","title":"W24AskPageThumbnail"},{"location":"api/asks/#w24titlepage","text":"Every W24Page that is not classified as Sheet is automatically classified as W24TitlePage. Important If you want to use more information from the title pages, please get in touch with us. Internally we extract the position groups (i.e., the position, description, quantity) from the title pages. We also interpret the description to extract such information as \"Drawing Id\", \"Material\" etc. If you have a good business case for it, we'll be able to make this available to you.","title":"W24TitlePage"},{"location":"api/asks/#w24sheet","text":"If a W24Page contains a Technical Drawing, it will be classified as W24Sheet.","title":"W24Sheet"},{"location":"api/asks/#w24asksheetexportonshape-experimental","text":"The W24AskSheetExport will export all details (as far as they are understood and implemented) to Onshape , your online CAD Software. Beware that this feature is still experimental, and that the data you export to onshape is currently publically available! You'll need to create your own account with Onshape to enjoy privacy. The Websocket will respond with something along the lines of: { \"message_type\": \"ASK_SHEET_EXPORT_ONSHAPE\", \"payload_dict\": { \"document_id\": \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\", \"page_id\": \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\", \"sheet_id\": \"5bc164d4-df0d-4482-9048-3a84de010abf\", \"onshape_url\":\"https://onshape.com/..\" } } Note Beware that the onshape_url will not be stored in the payload_url, but is an attribute to the payload_dict.","title":"W24AskSheetExportOnshape (Experimental)"},{"location":"api/asks/#w24asksheetthumbnail","text":"The W24AskSheetThumbnail will return a thumbnail for each sheet in the document. The thumbnail will be rotated automatically. The Websocket will respond with something along the lines of: { \"message_type\": \"ASK_SHEET_THUMBNAIL\", \"payload_dict\": { \"document_id\": \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\", \"page_id\": \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\", \"sheet_id\": \"5bc164d4-df0d-4482-9048-3a84de010abf\", }, \"payload_url\": \"https://...\" }","title":"W24AskSheetThumbnail"},{"location":"api/asks/#w24varianttable","text":"To make life more interesting, some Technical Drawings contain a seperate specification table that typically looks something like this: length width Type A 10 10 +- 0.1 Type B 10 12 +- 0.2 A Sheet that contains such a specification table consequently describes multiple W24Variants; in this case the parts \"Type A\" and \"Type B\".","title":"W24VariantTable"},{"location":"api/asks/#w24plane","text":"","title":"W24Plane"},{"location":"api/asks/#w24askplanethumbnail","text":"The W24AskPlaneThumbnail will return a thumbnail for each plane on the sheet. This also includes detail drawings. The thumbnail will be rotated automatically. { \"message_type\": \"ASK_PLANE_THUMBNAIL\", \"payload_dict\": { \"document_id\": \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\", \"page_id\": \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\", \"sheet_id\": \"5bc164d4-df0d-4482-9048-3a84de010abf\", \"plane_id\": \"eca7c9f8-6dc2-11ea-bc55-0242ac130003\", }, \"payload_url\": \"https://...\" }","title":"W24AskPlaneThumbnail"},{"location":"api/asks/#w24variant","text":"Each sheet may describe one or more Variants, depending on the precense of a W24VariantTable . You can think of it as a \"fanzy\" description of a Part. In most cases a Technical Drawing will only describe one Variant (i.e., one Part), but we see W24VariantTables in about 2-5% of the files. So be sure to implement the handling of multiple variants.","title":"W24Variant"},{"location":"api/asks/#w24askvariantexportstl-experimental","text":"The W24AskVariantExport will return an STL file for each variant that was found on the Sheet. { \"message_type\": \"ASK_VARIANT_EXPORT_STL\", \"payload_dict\": { \"document_id\": \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\", \"page_id\": \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\", \"sheet_id\": \"5bc164d4-df0d-4482-9048-3a84de010abf\", \"variant_id\": \"132ea0e2-6dc3-11ea-bc55-0242ac130003\", }, \"payload_url\": \"https://...\" }","title":"W24AskVariantExportSTL (Experimental)"},{"location":"api/asks/#w24askvariantfinesttolerance","text":"W24AskVariantFinestTolerance will return the minimal measure tolerances that were found among all measures in the Variant. Here the finest tolerance is understood as the tolerance whose difference between the upper and lower bound is the smallest. Depending on your Drawing, the signs might be +/+, +/- or -/-. { \"message_type\": \"ASK_VARIANT_FINEST_TOLERANCE\", \"payload_dict\": { \"document_id\": \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\", \"page_id\": \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\", \"sheet_id\": \"5bc164d4-df0d-4482-9048-3a84de010abf\", \"variant_id\": \"132ea0e2-6dc3-11ea-bc55-0242ac130003\", \"variant_finest_tolerance\": { \"upper_tolerance\": 0.1, \"lower_tolerance\": -0.05 } } } Note As the tolerances could potentially be specified in the W24VariantTable, you will need to be sure to pick the correct variant.","title":"W24AskVariantFinestTolerance"},{"location":"api/asks/#w24askvariantoveralldimensions","text":"The W24AskVariantOverallDimensions will return the overall dimensions for each variant that is found. It will return a W24OverallDimensions object, that contains measures for x, y, z as well as an enum indicating the shape. { \"message_type\": \"ASK_VARIANT_EXPORT_STL\", \"payload_dict\": { \"document_id\": \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\", \"page_id\": \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\", \"sheet_id\": \"5bc164d4-df0d-4482-9048-3a84de010abf\", \"variant_id\": \"132ea0e2-6dc3-11ea-bc55-0242ac130003\", \"variant_overall_dimensions\": { \"x_dimension\": { \"value\": 5, \"tolerance_upper\": 0.5, \"tolerance_lower\": null }, \"y_dimension\": { \"value\": 5, \"tolerance_upper\": 0.5, \"tolerance_lower\": null }, \"z_dimension\": { \"value\": 15, \"tolerance_upper\": 0.5, \"tolerance_lower\": 0.1 }, \"shape\":\"ROD_ROUND\" } } }","title":"W24AskVariantOverallDimensions"},{"location":"api/basics/","text":"mermaid.initialize({startOnLoad:true}); mermaid.sequenceConfig = {</p> <div class=\"codehilite\"><pre><span></span><code>diagramMarginX:50, diagramMarginY:10, boxTextMargin:5, noteMargin:10, messageMargin:35, mirrorActors:true </code></pre></div> <p>}; API \u00b6 We have opted to use a combination of an HTTPS and Websockets Connection to allow the client to sit behind a firewall without the ability to provide a publicly available callback URL -> websockets The API is has three components that interact with each other: Authentication Client Techread HTTPS Client Techread Secure Websockets Client Note If you need the ability to submit a techread request, but have no access to websockets (e.g., because your programming language does not provide easy access), let us know and we will provide a HTTPS-only API endpoint. Communication Flow \u00b6 To make things a bit clearer, have a quick look at the sequence diagram below that describes a communication flow in which you are asking the W24 Techread API for two things: W24AskPageThumbnail: A Thumbnail of the Page W24AskVariantOverallDimensions: the overall dimensions of all the variants described on the page. sequenceDiagram participant You participant W24 Https participant W24 Websocket participant AWS Cognito rect rgb(200,200,200) Note over You, W24 Https: Authenticate You->>AWS Cognito: Authenticate AWS Cognito -->>You: Token end rect rgb(200,200,200) Note over You, W24 Https: Initiate Request with 2 Asks: -> W24AskPageThumbnail, -> W24AskVariantOverallDimensions You->>W24 Websocket: Initiate Request with Asks W24 Websocket -->>You: RequestId You->>W24 Https: Upload Drawing You->>W24 Websocket: Start Read Process end rect rgb(200,200,200) Note over You, W24 Https: Response for W24AskPageThumbnail W24 Websocket -->>You: Response You ->> W24 Https: Request `payload_url` W24 Https -->> You: Thumbnail as PNG end rect rgb(200,200,200) Note over You, W24 Https: Response for W24AskVariantOverallDimensions W24 Websocket -->>You: Response end Rational \u00b6 We have decided to use this (rather unusual) format for two main reasons: 1. Continuous Information Flow \u00b6 We want to ensure that you can consume the information whenever it becomes available. So rather than waiting for the complete process to complete (which can take up to 1 minute), you can quickly get the information you need. 2. Continuous Extendability \u00b6 We are constantly learning new things about your use cases and the particularities of the Technical Drawings that you submit (thank you oil and gas... we are having a lot of fun reading about your fanzy standards). This makes it important for us to quickly and easily extend the API capabilities without the need to maintain \"legacy APIs\". The chosen form allows us to continuously extend the functionality of the API while maintaining backwards-compatability. An easy example are the units in W24AskVariantOverallDimensions. Currently we quote the measures \"as-is\" from the Technical Drawing. So, if you submit two otherwise identical drawings, but change the units in one from Milimeter to Inches, you will currently receive the same response. This is clearly not desired and will be improved in the future. When we do, we'll add an attribute to the W24AskVariantOverallDimensions that allows you to choose the behaviour. By default it will mimick the old behaviour. Important We urge you to follow the Best Practices on Integration Testing. Check this Article for example. Clients \u00b6 The Python Client \u00b6 To make your life as developer as easy as possible, we have implemented a reference client in python. See API/TechreadClient for details.","title":"Getting Started"},{"location":"api/basics/#api","text":"We have opted to use a combination of an HTTPS and Websockets Connection to allow the client to sit behind a firewall without the ability to provide a publicly available callback URL -> websockets The API is has three components that interact with each other: Authentication Client Techread HTTPS Client Techread Secure Websockets Client Note If you need the ability to submit a techread request, but have no access to websockets (e.g., because your programming language does not provide easy access), let us know and we will provide a HTTPS-only API endpoint.","title":"API"},{"location":"api/basics/#communication-flow","text":"To make things a bit clearer, have a quick look at the sequence diagram below that describes a communication flow in which you are asking the W24 Techread API for two things: W24AskPageThumbnail: A Thumbnail of the Page W24AskVariantOverallDimensions: the overall dimensions of all the variants described on the page. sequenceDiagram participant You participant W24 Https participant W24 Websocket participant AWS Cognito rect rgb(200,200,200) Note over You, W24 Https: Authenticate You->>AWS Cognito: Authenticate AWS Cognito -->>You: Token end rect rgb(200,200,200) Note over You, W24 Https: Initiate Request with 2 Asks: -> W24AskPageThumbnail, -> W24AskVariantOverallDimensions You->>W24 Websocket: Initiate Request with Asks W24 Websocket -->>You: RequestId You->>W24 Https: Upload Drawing You->>W24 Websocket: Start Read Process end rect rgb(200,200,200) Note over You, W24 Https: Response for W24AskPageThumbnail W24 Websocket -->>You: Response You ->> W24 Https: Request `payload_url` W24 Https -->> You: Thumbnail as PNG end rect rgb(200,200,200) Note over You, W24 Https: Response for W24AskVariantOverallDimensions W24 Websocket -->>You: Response end","title":"Communication Flow"},{"location":"api/basics/#rational","text":"We have decided to use this (rather unusual) format for two main reasons:","title":"Rational"},{"location":"api/basics/#1-continuous-information-flow","text":"We want to ensure that you can consume the information whenever it becomes available. So rather than waiting for the complete process to complete (which can take up to 1 minute), you can quickly get the information you need.","title":"1. Continuous Information Flow"},{"location":"api/basics/#2-continuous-extendability","text":"We are constantly learning new things about your use cases and the particularities of the Technical Drawings that you submit (thank you oil and gas... we are having a lot of fun reading about your fanzy standards). This makes it important for us to quickly and easily extend the API capabilities without the need to maintain \"legacy APIs\". The chosen form allows us to continuously extend the functionality of the API while maintaining backwards-compatability. An easy example are the units in W24AskVariantOverallDimensions. Currently we quote the measures \"as-is\" from the Technical Drawing. So, if you submit two otherwise identical drawings, but change the units in one from Milimeter to Inches, you will currently receive the same response. This is clearly not desired and will be improved in the future. When we do, we'll add an attribute to the W24AskVariantOverallDimensions that allows you to choose the behaviour. By default it will mimick the old behaviour. Important We urge you to follow the Best Practices on Integration Testing. Check this Article for example.","title":"2. Continuous Extendability"},{"location":"api/basics/#clients","text":"","title":"Clients"},{"location":"api/basics/#the-python-client","text":"To make your life as developer as easy as possible, we have implemented a reference client in python. See API/TechreadClient for details.","title":"The Python Client"},{"location":"api/communication-flow/","text":"","title":"Communication flow"},{"location":"api/techread-client/","text":"TechreadClient \u00b6 The Techread Client is a python-based reference implementation to illustrate the communication with the werk24 API. It is actively maintained and will be the lead-implementation for all our development efforts. That means that new features will become available here first. Installation \u00b6 Werk24 provides an easy-to-use and easy-to-extend Python-based client. Install our Python Client using pip : pip install git+https://git@github.com/werk24/werk24-python.git@master#egg=werk24 You can also add this URL directly into your requirements.txt . ... git+https://git@github.com/werk24/werk24-python.git@master#egg=werk24 ... Setting up the environment \u00b6 During the registration process, we will have provided you with a .env file that contains all the necessary authentication details and environment variables. You can either set these variables in you environment manually, or load it with the dotenv Package . pip install dotenv-python Important Use the dotenv-python package, not the dotenv Once you have the dotenv package installed, you can easily load the environment variables like so: from dotenv load_dotenv load_dotenv() Initiating the Client \u00b6 You can start a new Techread client with two lines. This will create a new client from the environment variables. from werk24 import W24TechreadClient client = W24TechreadClient.make_from_env() Defining your asks \u00b6 We understand that time is of utter importance when the customer is waiting for a response. To make sure that you can keep your customer entertained, we make the results available as soon as possible. The result is a continuous flow of information, that you can \"subscribe\" to. See API/Asks for details. To make your life as developer as easy as possible, we introduced a small Hook object that allows you to define The ask, and What function to call one the ask becomes available Defining your asks can be done as follows from werk24 import Hook,W24AskVariantOverallDimensions hooks = [ Hook( ask=W24AskVariantOverallDimensions(), function=lambda: msg: print(msg) ) ] For a full list of available asks, refer to API/Asks Submitting a Request \u00b6 Submitting a request requires you to start a session and submit both, a technical drawing (as bytes) and a list of hooks async with client as session drawing_path = ... drawing_bytes = open(drawing_path, \"rb\").read() session.read_drawing_with_hooks( drawing_bytes, hooks) Important Be sure to call the sniplet asyncinously (see Full Example) Full Example \u00b6 Combining all parts from above. import sys import asyncio from werk24 import W24TechreadClient, W24AskVariantOverallDimensions, Hook async def main(drawing_path:str) -> None: # get the drawing with open(drawing_path, \"rb\") as drawing_handle drawing_bytes = drawing_handle.read() # define the hooks hooks = [ Hook( ask=W24AskVariantOverallDimensions(), function=lambda: msg: print(msg) ) ] # make the session and start the reading process client = W24TechreadClient.make_from_env() async with client as session session.read_drawing_with_hooks( drawing_bytes, hooks) if __name__ == \"__main__\": try: drawing_path = sys.argv[1] except KeyError: sys.exit(\"Drawing Path Required as first argument\") asyncio.run(main(drawing_path)) And voil\u00e0, you should now see the overall dimensions of all parts printed on bash. Further Pointers \u00b6 In case you plan to implement your own client, have a look at the structure of the Python client. It has three \"Sublclients\" that deal with the different kind of endpoints. Important Please talk to us before you start implementing a client in a different language. We will definately do the peer review and would love to co-author the client to make the client available to other customers. Still, please understand that we do not speak all languages and that you'll need to be in the lead to develop that COBOL-Client (seems to be possible by the way). Authentication Client \u00b6 The Authentication Client allows you to obtain a JWT Token from AWS Cognito (see Basics/Authentication ). This Token needs to be added to each HTTPS and WSS request as Authorization: Bearer ... . Obtaining the Token is straight-foward, mainly because frameworks for many languages exist. See Github/werk24/werk24-python/auth_client.py for a python-based reference implementation. Techread HTTPS Client \u00b6 The Techread HTTPS Client is used to Upload Technical Drawings Upload Models Download binary Ask Responses Techread WSS Client \u00b6 The Techread WSS Client is used to: Initiate a Request Listen to Responses in \"near-real-time\"","title":"TechreadClient"},{"location":"api/techread-client/#techreadclient","text":"The Techread Client is a python-based reference implementation to illustrate the communication with the werk24 API. It is actively maintained and will be the lead-implementation for all our development efforts. That means that new features will become available here first.","title":"TechreadClient"},{"location":"api/techread-client/#installation","text":"Werk24 provides an easy-to-use and easy-to-extend Python-based client. Install our Python Client using pip : pip install git+https://git@github.com/werk24/werk24-python.git@master#egg=werk24 You can also add this URL directly into your requirements.txt . ... git+https://git@github.com/werk24/werk24-python.git@master#egg=werk24 ...","title":"Installation"},{"location":"api/techread-client/#setting-up-the-environment","text":"During the registration process, we will have provided you with a .env file that contains all the necessary authentication details and environment variables. You can either set these variables in you environment manually, or load it with the dotenv Package . pip install dotenv-python Important Use the dotenv-python package, not the dotenv Once you have the dotenv package installed, you can easily load the environment variables like so: from dotenv load_dotenv load_dotenv()","title":"Setting up the environment"},{"location":"api/techread-client/#initiating-the-client","text":"You can start a new Techread client with two lines. This will create a new client from the environment variables. from werk24 import W24TechreadClient client = W24TechreadClient.make_from_env()","title":"Initiating the Client"},{"location":"api/techread-client/#defining-your-asks","text":"We understand that time is of utter importance when the customer is waiting for a response. To make sure that you can keep your customer entertained, we make the results available as soon as possible. The result is a continuous flow of information, that you can \"subscribe\" to. See API/Asks for details. To make your life as developer as easy as possible, we introduced a small Hook object that allows you to define The ask, and What function to call one the ask becomes available Defining your asks can be done as follows from werk24 import Hook,W24AskVariantOverallDimensions hooks = [ Hook( ask=W24AskVariantOverallDimensions(), function=lambda: msg: print(msg) ) ] For a full list of available asks, refer to API/Asks","title":"Defining your asks"},{"location":"api/techread-client/#submitting-a-request","text":"Submitting a request requires you to start a session and submit both, a technical drawing (as bytes) and a list of hooks async with client as session drawing_path = ... drawing_bytes = open(drawing_path, \"rb\").read() session.read_drawing_with_hooks( drawing_bytes, hooks) Important Be sure to call the sniplet asyncinously (see Full Example)","title":"Submitting a Request"},{"location":"api/techread-client/#full-example","text":"Combining all parts from above. import sys import asyncio from werk24 import W24TechreadClient, W24AskVariantOverallDimensions, Hook async def main(drawing_path:str) -> None: # get the drawing with open(drawing_path, \"rb\") as drawing_handle drawing_bytes = drawing_handle.read() # define the hooks hooks = [ Hook( ask=W24AskVariantOverallDimensions(), function=lambda: msg: print(msg) ) ] # make the session and start the reading process client = W24TechreadClient.make_from_env() async with client as session session.read_drawing_with_hooks( drawing_bytes, hooks) if __name__ == \"__main__\": try: drawing_path = sys.argv[1] except KeyError: sys.exit(\"Drawing Path Required as first argument\") asyncio.run(main(drawing_path)) And voil\u00e0, you should now see the overall dimensions of all parts printed on bash.","title":"Full Example"},{"location":"api/techread-client/#further-pointers","text":"In case you plan to implement your own client, have a look at the structure of the Python client. It has three \"Sublclients\" that deal with the different kind of endpoints. Important Please talk to us before you start implementing a client in a different language. We will definately do the peer review and would love to co-author the client to make the client available to other customers. Still, please understand that we do not speak all languages and that you'll need to be in the lead to develop that COBOL-Client (seems to be possible by the way).","title":"Further Pointers"},{"location":"api/techread-client/#authentication-client","text":"The Authentication Client allows you to obtain a JWT Token from AWS Cognito (see Basics/Authentication ). This Token needs to be added to each HTTPS and WSS request as Authorization: Bearer ... . Obtaining the Token is straight-foward, mainly because frameworks for many languages exist. See Github/werk24/werk24-python/auth_client.py for a python-based reference implementation.","title":"Authentication Client"},{"location":"api/techread-client/#techread-https-client","text":"The Techread HTTPS Client is used to Upload Technical Drawings Upload Models Download binary Ask Responses","title":"Techread HTTPS Client"},{"location":"api/techread-client/#techread-wss-client","text":"The Techread WSS Client is used to: Initiate a Request Listen to Responses in \"near-real-time\"","title":"Techread WSS Client"},{"location":"basics/authentication/","text":"Authentication \u00b6 Werk24 uses the AWS Cognito Service to identify a user. We have decided to use on this service, mainly because it provides you with two advantages: The source code that handles the authentication is constantly monitored and improved by a dedicated and highly-specialized team. Many standard libraries exist that handle the authentication process for you. We can provide you with diffent user names for different geographies, allowing you to ensure that your customer's data does not leave its region-of-origin. See General Data Protetion Regulation (GDPR) . Credentials File \u00b6 During the registration process, Werk24 will have provided you with an .env file that contains all the information that is required to authenticate with our API. This file assumes that you have only registered one user with Werk24. The file will look like this W24TECHREAD_AUTH_REGION=\"eu-central-1\" W24TECHREAD_AUTH_CLIENT_ID=\"xxxxxxxxxxxxxxxxxxxxxxxxxx\" W24TECHREAD_AUTH_CLIENT_SECRET=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" W24TECHREAD_AUTH_USERNAME=\"xx@xx.xx\" W24TECHREAD_AUTH_PASSWORD=\"--- INSERT HERE ---\" W24TECHREAD_SERVER_HTTPS=\"techread.w24.io\" W24TECHREAD_SERVER_WSS=\"techread-ws.w24.io\" W24TECHREAD_VERSION=\"v1\" The content of the file will be used when you call the TechreadClient.make_from_env() method.","title":"Authentication"},{"location":"basics/authentication/#authentication","text":"Werk24 uses the AWS Cognito Service to identify a user. We have decided to use on this service, mainly because it provides you with two advantages: The source code that handles the authentication is constantly monitored and improved by a dedicated and highly-specialized team. Many standard libraries exist that handle the authentication process for you. We can provide you with diffent user names for different geographies, allowing you to ensure that your customer's data does not leave its region-of-origin. See General Data Protetion Regulation (GDPR) .","title":"Authentication"},{"location":"basics/authentication/#credentials-file","text":"During the registration process, Werk24 will have provided you with an .env file that contains all the information that is required to authenticate with our API. This file assumes that you have only registered one user with Werk24. The file will look like this W24TECHREAD_AUTH_REGION=\"eu-central-1\" W24TECHREAD_AUTH_CLIENT_ID=\"xxxxxxxxxxxxxxxxxxxxxxxxxx\" W24TECHREAD_AUTH_CLIENT_SECRET=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" W24TECHREAD_AUTH_USERNAME=\"xx@xx.xx\" W24TECHREAD_AUTH_PASSWORD=\"--- INSERT HERE ---\" W24TECHREAD_SERVER_HTTPS=\"techread.w24.io\" W24TECHREAD_SERVER_WSS=\"techread-ws.w24.io\" W24TECHREAD_VERSION=\"v1\" The content of the file will be used when you call the TechreadClient.make_from_env() method.","title":"Credentials File"},{"location":"basics/quickstart/","text":"Getting Started \u00b6 Werk24 is designed to make your life as developer who want to handle Technical Drawings as simple and convenient as possible. If you have never used Werk24 before, this tutorial helps you getting started. Getting started with Werk24 follows a simple three step process Getting Started Install the Client Configure the Client Test the Client Install the Client \u00b6 Werk24 provides an easy-to-use and easy-to-extend Python-based client. Install our Python Client using pip : pip install git+https://github.com/werk24/werk24-python.git@master#egg=werk24 Note Should you be interested in a client for a different language, please get in touch with us. Configure the Client \u00b6 After you completed downloading and installing the Werk24 client, you'll need to provide the access information. During the registration process we will have provided you with a .env file, that contains your access information. It will look similar to this: W24TECHREAD_AUTH_REGION=\"eu-central-1\" W24TECHREAD_AUTH_CLIENT_ID=\"xxxxxxxxxxxxxxxxxxxxxxxxxx\" W24TECHREAD_AUTH_CLIENT_SECRET=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" W24TECHREAD_AUTH_USERNAME=\"xx@xx.xx\" W24TECHREAD_AUTH_PASSWORD=\"--- INSERT HERE ---\" W24TECHREAD_SERVER_HTTPS=\"techread.w24.io\" W24TECHREAD_SERVER_WSS=\"techread-ws.w24.io\" W24TECHREAD_VERSION=\"v1\" In the welcome email we will also have provided you with a temporary password for your application. You will need to update the password through this link: set password before you will be able to access the API. Replace the --- INSERT HERE --- line with your password and store the file in the base path of your project. Note Do not replace any existing .env file; simply append its content. For more details see Authentication Test the Client \u00b6 You can check whether client is installed and configured correctly by submitting a simple Techread request through the CLI. The request submits a technical drawing of your chose to the API and returns a thumbnail of the individual cuts. To be able to see the image, ensure that you have the Pillow package installed. pip install Pillow After that you can submit the request by running w24cli techread --ask-page-thumbnail ./your-file.pdf If everything works correctly, you will now see one or more images of the individual cuts on your Technical Drawing. Have a look at the additional details at the CLI Documentation .","title":"Getting Started"},{"location":"basics/quickstart/#getting-started","text":"Werk24 is designed to make your life as developer who want to handle Technical Drawings as simple and convenient as possible. If you have never used Werk24 before, this tutorial helps you getting started. Getting started with Werk24 follows a simple three step process Getting Started Install the Client Configure the Client Test the Client","title":"Getting Started"},{"location":"basics/quickstart/#install-the-client","text":"Werk24 provides an easy-to-use and easy-to-extend Python-based client. Install our Python Client using pip : pip install git+https://github.com/werk24/werk24-python.git@master#egg=werk24 Note Should you be interested in a client for a different language, please get in touch with us.","title":"Install the Client"},{"location":"basics/quickstart/#configure-the-client","text":"After you completed downloading and installing the Werk24 client, you'll need to provide the access information. During the registration process we will have provided you with a .env file, that contains your access information. It will look similar to this: W24TECHREAD_AUTH_REGION=\"eu-central-1\" W24TECHREAD_AUTH_CLIENT_ID=\"xxxxxxxxxxxxxxxxxxxxxxxxxx\" W24TECHREAD_AUTH_CLIENT_SECRET=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" W24TECHREAD_AUTH_USERNAME=\"xx@xx.xx\" W24TECHREAD_AUTH_PASSWORD=\"--- INSERT HERE ---\" W24TECHREAD_SERVER_HTTPS=\"techread.w24.io\" W24TECHREAD_SERVER_WSS=\"techread-ws.w24.io\" W24TECHREAD_VERSION=\"v1\" In the welcome email we will also have provided you with a temporary password for your application. You will need to update the password through this link: set password before you will be able to access the API. Replace the --- INSERT HERE --- line with your password and store the file in the base path of your project. Note Do not replace any existing .env file; simply append its content. For more details see Authentication","title":"Configure the Client"},{"location":"basics/quickstart/#test-the-client","text":"You can check whether client is installed and configured correctly by submitting a simple Techread request through the CLI. The request submits a technical drawing of your chose to the API and returns a thumbnail of the individual cuts. To be able to see the image, ensure that you have the Pillow package installed. pip install Pillow After that you can submit the request by running w24cli techread --ask-page-thumbnail ./your-file.pdf If everything works correctly, you will now see one or more images of the individual cuts on your Technical Drawing. Have a look at the additional details at the CLI Documentation .","title":"Test the Client"},{"location":"basics/service_times/","text":"Service Times \u00b6 Due to the high costs that are associated with running our software on GPUs, we have decided to limit the availability of our infrastructure to the core hours of our customers. Info Currently these are Monday - Friday 09:00 - 18:00 CET. Outside that these service times, you will be able to submit requests, but you will not be guaranteed to receive a response. Note As this is purely a financial question, we'll be happy to extend these service times in accordance with your busines case","title":"Service Times"},{"location":"basics/service_times/#service-times","text":"Due to the high costs that are associated with running our software on GPUs, we have decided to limit the availability of our infrastructure to the core hours of our customers. Info Currently these are Monday - Friday 09:00 - 18:00 CET. Outside that these service times, you will be able to submit requests, but you will not be guaranteed to receive a response. Note As this is purely a financial question, we'll be happy to extend these service times in accordance with your busines case","title":"Service Times"},{"location":"cli/basic/","text":"Command Line Interface \u00b6 If you have installed Werk24 with PIP, you will have the w24cli command available. usage: w24cli [-h] {techread} ... positional arguments: {techread} techread Submit a Technical Drawing to Werk24 for analysis optional arguments: -h, --help show this help message and exit Subcommand Techread \u00b6 The command line interface allows you to interact with the Werk24 APIs. To ensure downwards compatibility, we have added the subcommand ' techread '. Further subcommands might follow in the future.","title":"Basic"},{"location":"cli/basic/#command-line-interface","text":"If you have installed Werk24 with PIP, you will have the w24cli command available. usage: w24cli [-h] {techread} ... positional arguments: {techread} techread Submit a Technical Drawing to Werk24 for analysis optional arguments: -h, --help show this help message and exit","title":"Command Line Interface"},{"location":"cli/basic/#subcommand-techread","text":"The command line interface allows you to interact with the Werk24 APIs. To ensure downwards compatibility, we have added the subcommand ' techread '. Further subcommands might follow in the future.","title":"Subcommand Techread"},{"location":"cli/techread/","text":"Techread Subcommand \u00b6 The techread subcommand allows you to submit your Technical Drawing and ask Werk24 to return certain details about it. We call these details \"asks\". See API/Asks for a more detailed description. While the API allows you to define your asks in a more granular way, the CLI will always request each ask with its default attributes. Available Commands \u00b6 The sniplet below gives you an overview over the available commands. You can obtain the same output by calling w24cli techread --help . usage: w24cli techread [-h] [-i] [--ask-techread-started] [--ask-page-thumbnail] [--ask-sheet-thumbnail] [--ask-plane-thumbnail] [--ask-variant-overall-dimensions] [--ask-train] input_file positional arguments: input_file path to the file that is to be analyzed optional arguments: -h, --help show this help message and exit -i, --ignore-architecture-status flag indicating whether the architecture status should be ignored(i.e. whether the request should be sent even though the architecture is unavailable) --ask-techread-started ask for a callback when the techread process has been picked up by a worker --ask-page-thumbnail ask for a thumbnail for each page in the document --ask-sheet-thumbnail ask for a thumbnail of each sheet in the document --ask-plane-thumbnail ask for a thumbnail of each plane of each sheet in the document --ask-variant-overall-dimensions ask for the overall dimensions of each variant. The API will return the x,y,z dimensions as well as an enum indicating the shape --ask-train ask the the API to use the document solely for training. This is mainly used for internal purposes, but your are invited to submit additional files if you want to help us improve our system. Your will not be charged for these requests (but you'll also not get a response) Ignore Architecture Status \u00b6 This flag deserves special attention. Before the CLI submits a reading request to the API, it checks whether the Architecture is available (See Basics/Service-Times ). If the Architecture is not available, it will stop the execution and yield a warning. As we understand that software developer's working hours do not necessarily overlap with the working hours of machine builders (think 5am shift start), we allow you to set the -i flag. This will still send the request to the Werk24 API and start processing it. You will still be able to receive the asks that do not require the GPU infrastructure: W24AskTechreadStarted, W24AskPageThumbnail, W24SheetThumbnail.","title":"Techread"},{"location":"cli/techread/#techread-subcommand","text":"The techread subcommand allows you to submit your Technical Drawing and ask Werk24 to return certain details about it. We call these details \"asks\". See API/Asks for a more detailed description. While the API allows you to define your asks in a more granular way, the CLI will always request each ask with its default attributes.","title":"Techread Subcommand"},{"location":"cli/techread/#available-commands","text":"The sniplet below gives you an overview over the available commands. You can obtain the same output by calling w24cli techread --help . usage: w24cli techread [-h] [-i] [--ask-techread-started] [--ask-page-thumbnail] [--ask-sheet-thumbnail] [--ask-plane-thumbnail] [--ask-variant-overall-dimensions] [--ask-train] input_file positional arguments: input_file path to the file that is to be analyzed optional arguments: -h, --help show this help message and exit -i, --ignore-architecture-status flag indicating whether the architecture status should be ignored(i.e. whether the request should be sent even though the architecture is unavailable) --ask-techread-started ask for a callback when the techread process has been picked up by a worker --ask-page-thumbnail ask for a thumbnail for each page in the document --ask-sheet-thumbnail ask for a thumbnail of each sheet in the document --ask-plane-thumbnail ask for a thumbnail of each plane of each sheet in the document --ask-variant-overall-dimensions ask for the overall dimensions of each variant. The API will return the x,y,z dimensions as well as an enum indicating the shape --ask-train ask the the API to use the document solely for training. This is mainly used for internal purposes, but your are invited to submit additional files if you want to help us improve our system. Your will not be charged for these requests (but you'll also not get a response)","title":"Available Commands"},{"location":"cli/techread/#ignore-architecture-status","text":"This flag deserves special attention. Before the CLI submits a reading request to the API, it checks whether the Architecture is available (See Basics/Service-Times ). If the Architecture is not available, it will stop the execution and yield a warning. As we understand that software developer's working hours do not necessarily overlap with the working hours of machine builders (think 5am shift start), we allow you to set the -i flag. This will still send the request to the Werk24 API and start processing it. You will still be able to receive the asks that do not require the GPU infrastructure: W24AskTechreadStarted, W24AskPageThumbnail, W24SheetThumbnail.","title":"Ignore Architecture Status"}]}