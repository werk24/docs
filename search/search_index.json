{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Werk24 Documentation \u00b6 Welcome to the Werk24 documentation! With Werk24 you can easily develop Software Solutions that understand Technical Drawings. Here we cover everything about the API and its platform integrations. Getting Started \u00b6 To get started, you might find some of these links relevant: New to Werk24? Have a look at the Quickstart . No account yet? Get in touch with our sales team at info@werk24.biz . Stuck? Feel free to contact our support team at info@werk24.biz . Feeling Impatient? \u00b6 Getting started with Werk24 is easier than you might imagine. To make your life as easy as possible, we are providing a Python Client that handles the communication with our backend. All that remains for you to do, is pass the document bytes to the client and tell it what you want to learn about the drawing. Install the python client pip install werk24 Set your password and safe the credentials file in your working directory. After the registration we send you a .werk24 file the contains all the relevant configuration. Before you can use the client, you need to update your password and store it in the W24TECHREAD_AUTH_PASSWORD value in the .werk24 file. Important Set your password by clicking on this Link . Write your first Werk24 request from werk24 import Hook, W24TechreadClient,W24AskVariantMeasures # get the drawing_bytes document_bytes = ... # define what you want to learn about the drawing, and what function # should be called when a response arrives hooks = [Hook(ask=W24AskVariantMeasures(), function=print)] # make the call client = W24TechreadClient.make_from_env() async with client as session: await session.read_drawing_with_hooks(document_bytes,hooks) That's it.","title":"Welcome"},{"location":"#werk24-documentation","text":"Welcome to the Werk24 documentation! With Werk24 you can easily develop Software Solutions that understand Technical Drawings. Here we cover everything about the API and its platform integrations.","title":"Werk24 Documentation"},{"location":"#getting-started","text":"To get started, you might find some of these links relevant: New to Werk24? Have a look at the Quickstart . No account yet? Get in touch with our sales team at info@werk24.biz . Stuck? Feel free to contact our support team at info@werk24.biz .","title":"Getting Started"},{"location":"#feeling-impatient","text":"Getting started with Werk24 is easier than you might imagine. To make your life as easy as possible, we are providing a Python Client that handles the communication with our backend. All that remains for you to do, is pass the document bytes to the client and tell it what you want to learn about the drawing. Install the python client pip install werk24 Set your password and safe the credentials file in your working directory. After the registration we send you a .werk24 file the contains all the relevant configuration. Before you can use the client, you need to update your password and store it in the W24TECHREAD_AUTH_PASSWORD value in the .werk24 file. Important Set your password by clicking on this Link . Write your first Werk24 request from werk24 import Hook, W24TechreadClient,W24AskVariantMeasures # get the drawing_bytes document_bytes = ... # define what you want to learn about the drawing, and what function # should be called when a response arrives hooks = [Hook(ask=W24AskVariantMeasures(), function=print)] # make the call client = W24TechreadClient.make_from_env() async with client as session: await session.read_drawing_with_hooks(document_bytes,hooks) That's it.","title":"Feeling Impatient?"},{"location":"api/basics/","text":"mermaid.initialize({startOnLoad:true}); mermaid.sequenceConfig = {</p> <div class=\"codehilite\"><pre><span></span><code>diagramMarginX:50, diagramMarginY:10, boxTextMargin:5, noteMargin:10, messageMargin:35, mirrorActors:true </code></pre></div> <p>}; API \u00b6 We have opted to use a combination of an HTTPS and Websockets Connection to allow the client to sit behind a firewall without the ability to provide a publicly available callback URL -> websockets The API is has three components that interact with each other: Authentication Client Techread HTTPS Client Techread Secure Websockets Client Note If you need the ability to submit a techread request, but have no access to websockets (e.g., because your programming language does not provide easy access), let us know and we will provide a HTTPS-only API endpoint. Communication Flow \u00b6 To make things a bit clearer, have a quick look at the sequence diagram below that describes a communication flow in which you are asking the W24 Techread API for two things: W24AskPageThumbnail: A Thumbnail of the Page W24AskVariantOverallDimensions: the overall dimensions of all the variants described on the page. sequenceDiagram participant You participant W24 Https participant W24 Websocket participant AWS Cognito rect rgb(200,200,200) Note over You, W24 Https: Authenticate You->>AWS Cognito: Authenticate AWS Cognito -->>You: Token end rect rgb(200,200,200) Note over You, W24 Https: Initiate Request with 2 Asks: -> W24AskPageThumbnail, -> W24AskVariantOverallDimensions You->>W24 Websocket: Initiate Request with Asks W24 Websocket -->>You: RequestId You->>W24 Https: Upload Drawing You->>W24 Websocket: Start Read Process end rect rgb(200,200,200) Note over You, W24 Https: Response for W24AskPageThumbnail W24 Websocket -->>You: Response You ->> W24 Https: Request `payload_url` W24 Https -->> You: Thumbnail as PNG end rect rgb(200,200,200) Note over You, W24 Https: Response for W24AskVariantOverallDimensions W24 Websocket -->>You: Response end Rational \u00b6 We have decided to use this (rather unusual) format for two main reasons: 1. Continuous Information Flow \u00b6 We want to ensure that you can consume the information whenever it becomes available. So rather than waiting for the complete process to complete (which can take up to 1 minute), you can quickly get the information you need. 2. Continuous Extendability \u00b6 We are constantly learning new things about your use cases and the particularities of the Technical Drawings that you submit (thank you oil and gas... we are having a lot of fun reading about your fanzy standards). This makes it important for us to quickly and easily extend the API capabilities without the need to maintain \"legacy APIs\". The chosen form allows us to continuously extend the functionality of the API while maintaining backwards-compatability. An easy example are the units in W24AskVariantOverallDimensions. Currently we quote the measures \"as-is\" from the Technical Drawing. So, if you submit two otherwise identical drawings, but change the units in one from Milimeter to Inches, you will currently receive the same response. This is clearly not desired and will be improved in the future. When we do, we'll add an attribute to the W24AskVariantOverallDimensions that allows you to choose the behaviour. By default it will mimick the old behaviour. Important We urge you to follow the Best Practices on Integration Testing. Check this Article for example. Clients \u00b6 The Python Client \u00b6 To make your life as developer as easy as possible, we have implemented a reference client in python. See API/TechreadClient for details.","title":"Getting Started"},{"location":"api/basics/#api","text":"We have opted to use a combination of an HTTPS and Websockets Connection to allow the client to sit behind a firewall without the ability to provide a publicly available callback URL -> websockets The API is has three components that interact with each other: Authentication Client Techread HTTPS Client Techread Secure Websockets Client Note If you need the ability to submit a techread request, but have no access to websockets (e.g., because your programming language does not provide easy access), let us know and we will provide a HTTPS-only API endpoint.","title":"API"},{"location":"api/basics/#communication-flow","text":"To make things a bit clearer, have a quick look at the sequence diagram below that describes a communication flow in which you are asking the W24 Techread API for two things: W24AskPageThumbnail: A Thumbnail of the Page W24AskVariantOverallDimensions: the overall dimensions of all the variants described on the page. sequenceDiagram participant You participant W24 Https participant W24 Websocket participant AWS Cognito rect rgb(200,200,200) Note over You, W24 Https: Authenticate You->>AWS Cognito: Authenticate AWS Cognito -->>You: Token end rect rgb(200,200,200) Note over You, W24 Https: Initiate Request with 2 Asks: -> W24AskPageThumbnail, -> W24AskVariantOverallDimensions You->>W24 Websocket: Initiate Request with Asks W24 Websocket -->>You: RequestId You->>W24 Https: Upload Drawing You->>W24 Websocket: Start Read Process end rect rgb(200,200,200) Note over You, W24 Https: Response for W24AskPageThumbnail W24 Websocket -->>You: Response You ->> W24 Https: Request `payload_url` W24 Https -->> You: Thumbnail as PNG end rect rgb(200,200,200) Note over You, W24 Https: Response for W24AskVariantOverallDimensions W24 Websocket -->>You: Response end","title":"Communication Flow"},{"location":"api/basics/#rational","text":"We have decided to use this (rather unusual) format for two main reasons:","title":"Rational"},{"location":"api/basics/#1-continuous-information-flow","text":"We want to ensure that you can consume the information whenever it becomes available. So rather than waiting for the complete process to complete (which can take up to 1 minute), you can quickly get the information you need.","title":"1. Continuous Information Flow"},{"location":"api/basics/#2-continuous-extendability","text":"We are constantly learning new things about your use cases and the particularities of the Technical Drawings that you submit (thank you oil and gas... we are having a lot of fun reading about your fanzy standards). This makes it important for us to quickly and easily extend the API capabilities without the need to maintain \"legacy APIs\". The chosen form allows us to continuously extend the functionality of the API while maintaining backwards-compatability. An easy example are the units in W24AskVariantOverallDimensions. Currently we quote the measures \"as-is\" from the Technical Drawing. So, if you submit two otherwise identical drawings, but change the units in one from Milimeter to Inches, you will currently receive the same response. This is clearly not desired and will be improved in the future. When we do, we'll add an attribute to the W24AskVariantOverallDimensions that allows you to choose the behaviour. By default it will mimick the old behaviour. Important We urge you to follow the Best Practices on Integration Testing. Check this Article for example.","title":"2. Continuous Extendability"},{"location":"api/basics/#clients","text":"","title":"Clients"},{"location":"api/basics/#the-python-client","text":"To make your life as developer as easy as possible, we have implemented a reference client in python. See API/TechreadClient for details.","title":"The Python Client"},{"location":"api/communication-flow/","text":"","title":"Communication flow"},{"location":"api/techread-client/","text":"TechreadClient \u00b6 The Techread Client is a python-based reference implementation to illustrate the communication with the werk24 API. It is actively maintained and will be the lead-implementation for all our development efforts. Initiating the Client \u00b6 You can make a new Techread client in two lines of code. from werk24 import W24TechreadClient client = W24TechreadClient.make_from_env() This will create a new client from the environment variables. The client will look for the credentials in the .werk24 file in your working directory. If the file cannot be found, the Client falls back to the information it can obtain from the ENVIRONMENT VARIABLES . The Ask Concept \u00b6 We understand that the individual use-cases can vary largely. Take these two extremes: Application 1 runs a batch job to obtain thumbnails of the main sectional on a Technical Drawing. Application 2 wants to derive the minimal tolerances on an A0 Technical drawing to inform the live-pricing engine. The user remains online and wants to be entertained while she is waiting for the price assessment. To serve both applications with the same API, we have introduced the concept \"Ask\", which allows you to define very precicely what you want to learn about the Technical Drawing. Each \"Ask\" then triggers a response as soon as the information becomes available. To come back to our application: Applciation 1 would submit only one Ask: W24AskSectionalThumbnail() Application 2 would submit multiple Asks W24AskSheetThumbnail() -- gives the user an overview over the complete sheet W24AskSectionalThumbail() -- shows to the user that the individual sectionals have been separated correctly W24AskVariantMeasures() -- delivers the complete information about the Measures (incl. tolerances) See API/Asks for details. Defining Hooks \u00b6 To make your life as developer as easy as possible, we introduced a small Hook object that allows you to define The Ask, and What function should be called when the Ask is answered The defintion is very simple: from werk24 import Hook,W24AskVariantMeasures hooks = [Hook(ask=W24AskVariantMeasures(), function=print)] For a full list of available asks, refer to API/Asks Submitting a Request \u00b6 Submitting a request requires you to start a session and submit both, a Technical Drawing (as bytes) and a list of hooks drawing_path = ... drawing_bytes = open(drawing_path, \"rb\").read() async with client as session session.read_drawing_with_hooks( drawing_bytes, hooks) !!! important Be sure to call the sniplet asyncinously (see Full Example) Full Example \u00b6 Combining all parts from above, we arrive at the full example. When you call the script with the path to a Technical Drawing as first argument, you should shortly after see the measures that were detected on the Drawing. Be aware that the API will return a response for each sectional that was found on the Canvas. If your Document contains 2 Pages with 2 Sectionals each, you will receive 4 responses. import asyncio import sys from dotenv import load_dotenv from werk24 import W24TechreadClient, W24AskVariantMeasures, Hook load_dotenv('.werk24') async def main(drawing_path:str) -> None: # define the hooks hooks = [Hook(ask=W24AskVariantMeasures(), function=print)] # make the session and start the reading process client = W24TechreadClient.make_from_env() async with client as session: await session.read_drawing_with_hooks(drawing_bytes, hooks) if __name__ == \"__main__\": try: drawing_path = sys.argv[1] # get the drawing with open(drawing_path, \"rb\") as drawing_handle: drawing_bytes = drawing_handle.read() except FileNotFoundError: sys.exit(\"File not found\") except KeyError: sys.exit(\"Drawing Path Required as first argument\") asyncio.run(main(drawing_path)) Further Pointers \u00b6 In case you plan to implement your own client, have a look at the structure of the Python client. It has three \"Sublclients\" that deal with the different kind of endpoints. Important Please talk to us before you start implementing a client in a different language. We are happy to perform peer reviews and would love to make the client available to other customers. Authentication Client \u00b6 The Authentication Client allows you to obtain a JWT Token from AWS Cognito (see Basics/Authentication ). This Token needs to be added to each HTTPS and WSS request as Authorization: Bearer ... . Obtaining the Token is straight-foward, mainly because frameworks for many languages exist. See Github/werk24/werk24-python/auth_client.py for a python-based reference implementation. Techread HTTPS Client \u00b6 The Techread HTTPS Client is used to Upload Technical Drawings Upload Models Download binary Ask Responses Techread WSS Client \u00b6 The Techread WSS Client is used to: Initiate a Request Listen to Responses in \"near-real-time\"","title":"TechreadClient"},{"location":"api/techread-client/#techreadclient","text":"The Techread Client is a python-based reference implementation to illustrate the communication with the werk24 API. It is actively maintained and will be the lead-implementation for all our development efforts.","title":"TechreadClient"},{"location":"api/techread-client/#initiating-the-client","text":"You can make a new Techread client in two lines of code. from werk24 import W24TechreadClient client = W24TechreadClient.make_from_env() This will create a new client from the environment variables. The client will look for the credentials in the .werk24 file in your working directory. If the file cannot be found, the Client falls back to the information it can obtain from the ENVIRONMENT VARIABLES .","title":"Initiating the Client"},{"location":"api/techread-client/#the-ask-concept","text":"We understand that the individual use-cases can vary largely. Take these two extremes: Application 1 runs a batch job to obtain thumbnails of the main sectional on a Technical Drawing. Application 2 wants to derive the minimal tolerances on an A0 Technical drawing to inform the live-pricing engine. The user remains online and wants to be entertained while she is waiting for the price assessment. To serve both applications with the same API, we have introduced the concept \"Ask\", which allows you to define very precicely what you want to learn about the Technical Drawing. Each \"Ask\" then triggers a response as soon as the information becomes available. To come back to our application: Applciation 1 would submit only one Ask: W24AskSectionalThumbnail() Application 2 would submit multiple Asks W24AskSheetThumbnail() -- gives the user an overview over the complete sheet W24AskSectionalThumbail() -- shows to the user that the individual sectionals have been separated correctly W24AskVariantMeasures() -- delivers the complete information about the Measures (incl. tolerances) See API/Asks for details.","title":"The Ask Concept"},{"location":"api/techread-client/#defining-hooks","text":"To make your life as developer as easy as possible, we introduced a small Hook object that allows you to define The Ask, and What function should be called when the Ask is answered The defintion is very simple: from werk24 import Hook,W24AskVariantMeasures hooks = [Hook(ask=W24AskVariantMeasures(), function=print)] For a full list of available asks, refer to API/Asks","title":"Defining Hooks"},{"location":"api/techread-client/#submitting-a-request","text":"Submitting a request requires you to start a session and submit both, a Technical Drawing (as bytes) and a list of hooks drawing_path = ... drawing_bytes = open(drawing_path, \"rb\").read() async with client as session session.read_drawing_with_hooks( drawing_bytes, hooks) !!! important Be sure to call the sniplet asyncinously (see Full Example)","title":"Submitting a Request"},{"location":"api/techread-client/#full-example","text":"Combining all parts from above, we arrive at the full example. When you call the script with the path to a Technical Drawing as first argument, you should shortly after see the measures that were detected on the Drawing. Be aware that the API will return a response for each sectional that was found on the Canvas. If your Document contains 2 Pages with 2 Sectionals each, you will receive 4 responses. import asyncio import sys from dotenv import load_dotenv from werk24 import W24TechreadClient, W24AskVariantMeasures, Hook load_dotenv('.werk24') async def main(drawing_path:str) -> None: # define the hooks hooks = [Hook(ask=W24AskVariantMeasures(), function=print)] # make the session and start the reading process client = W24TechreadClient.make_from_env() async with client as session: await session.read_drawing_with_hooks(drawing_bytes, hooks) if __name__ == \"__main__\": try: drawing_path = sys.argv[1] # get the drawing with open(drawing_path, \"rb\") as drawing_handle: drawing_bytes = drawing_handle.read() except FileNotFoundError: sys.exit(\"File not found\") except KeyError: sys.exit(\"Drawing Path Required as first argument\") asyncio.run(main(drawing_path))","title":"Full Example"},{"location":"api/techread-client/#further-pointers","text":"In case you plan to implement your own client, have a look at the structure of the Python client. It has three \"Sublclients\" that deal with the different kind of endpoints. Important Please talk to us before you start implementing a client in a different language. We are happy to perform peer reviews and would love to make the client available to other customers.","title":"Further Pointers"},{"location":"api/techread-client/#authentication-client","text":"The Authentication Client allows you to obtain a JWT Token from AWS Cognito (see Basics/Authentication ). This Token needs to be added to each HTTPS and WSS request as Authorization: Bearer ... . Obtaining the Token is straight-foward, mainly because frameworks for many languages exist. See Github/werk24/werk24-python/auth_client.py for a python-based reference implementation.","title":"Authentication Client"},{"location":"api/techread-client/#techread-https-client","text":"The Techread HTTPS Client is used to Upload Technical Drawings Upload Models Download binary Ask Responses","title":"Techread HTTPS Client"},{"location":"api/techread-client/#techread-wss-client","text":"The Techread WSS Client is used to: Initiate a Request Listen to Responses in \"near-real-time\"","title":"Techread WSS Client"},{"location":"asks/basics/","text":"mermaid.initialize({startOnLoad:true}); mermaid.sequenceConfig = {</p> <div class=\"codehilite\"><pre><span></span><code>diagramMarginX:50, diagramMarginY:10, boxTextMargin:5, noteMargin:10, messageMargin:35, mirrorActors:true </code></pre></div> <p>}; Asks \u00b6 Asks are your way to tell the Werk24 Techread API what information you would like to learn about the Technical Drawing. We have decided to use this format, as it allows you to specify exactly what you would like to learn about the drawing, and can serve your customer as soon as possible. Time is of the essence! The intend of this page is to give you a brief overview over the available Ask Types. Please refer to the API reference for a full description. graph TD W24Document --1:n--> W24Page W24Page --1:n--> W24Sheet W24Page --> PageAsks(\" W24AskPageThumbnail \"):::ask W24Sheet --1:1--> W24VariantTable W24Sheet --1:n--> W24Sectional W24Sheet --> SheetAsks(\" W24AskSheetThumbnail \"):::ask W24Sectional -.n:m.-> W24Variant W24VariantTable -.1:m.-> W24Variant W24Variant --> VariantAsks(\" W24AskVariantMeasures \"):::ask W24Sectional --> SectionalAsks(\" W24AskSectionalThumbnail \"):::ask classDef ask fill:#cad;","title":"Basics"},{"location":"asks/basics/#asks","text":"Asks are your way to tell the Werk24 Techread API what information you would like to learn about the Technical Drawing. We have decided to use this format, as it allows you to specify exactly what you would like to learn about the drawing, and can serve your customer as soon as possible. Time is of the essence! The intend of this page is to give you a brief overview over the available Ask Types. Please refer to the API reference for a full description. graph TD W24Document --1:n--> W24Page W24Page --1:n--> W24Sheet W24Page --> PageAsks(\" W24AskPageThumbnail \"):::ask W24Sheet --1:1--> W24VariantTable W24Sheet --1:n--> W24Sectional W24Sheet --> SheetAsks(\" W24AskSheetThumbnail \"):::ask W24Sectional -.n:m.-> W24Variant W24VariantTable -.1:m.-> W24Variant W24Variant --> VariantAsks(\" W24AskVariantMeasures \"):::ask W24Sectional --> SectionalAsks(\" W24AskSectionalThumbnail \"):::ask classDef ask fill:#cad;","title":"Asks"},{"location":"asks/page/","text":"W24Document & W24Page \u00b6 As the image below illustrates, a W24Document constist of one more multiple W24Pages. You can think of it as the pages in the PDF document that you submitted. If you send us an image, the W24Document will have exactly one page: your image. Our algorithm automatically assesses the contents of each page and classifies it either as W24TitlePage or W24Sheet . W24AskPageThumbnail \u00b6 The W24AskPageThumbnail will return a thumbnail for each page in the document. You will receive one W24AskPageThumbnailResponse for each Page in the Document. The The Page Thumbnail will differs from the original Document in serveral ways: It is converted to grayscale , i.e, no matter how colorful the original drawing was, you will always receive a grayscale image in response. Please let us know if you need to have the colorized image; we are happy to add a parameter to the Ask. It is denoised , i.e, various kinds of noise will have been removed PAYLOAD DICT document_id UUID4 -- Example: \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\" Unique UUID that identifies the document page_id UUID4 -- Example: \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\" Unqiue UUID that identifies the page page_number int -- Example: 1 Page Number in the Document (starts at 1) PAYLOAD URL url Http -- Example: https://techread.w24.io/download/7153d685-9792-4c08-86bf-48474119b9db Important Accessing the payload url requires a valid authentication token W24TitlePage \u00b6 Every W24Page that is not classified as Sheet is automatically classified as W24TitlePage. Important The W24TitlePage objects are currently only available to development partners. W24Sheet \u00b6 If a W24Page contains a Technical Drawing, it will be classified as W24Sheet. The Sheet corresponds to the content of the main frame on the Page. If the page does not contain such a frame, the complete Page is interpreted as Sheet. The Sheet Thumbnail will differs from the original Document in serveral ways: It is converted to grayscale , i.e, no matter how colorful the original drawing was, you will always receive a grayscale image in response. Please let us know if you need to have the colorized image; we are happy to add a parameter to the Ask. It is denoised , i.e, various kinds of noise will have been removed It is uprighted , i.e., rotated in the way a human intelligence would W24AskSheetThumbnail \u00b6 The W24AskSheetThumbnail will return a thumbnail for each sheet in the document. PAYLOAD DICT document_id UUID4 -- Example: \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\" Unique UUID that identifies the document page_id UUID4 -- Example: \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\" Unqiue UUID that identifies the page sheet_id UUID4 -- Example: \"5bc164d4-df0d-4482-9048-3a84de010abf\" Unqiue UUID that identifies the sheet PAYLOAD URL url Http -- Example: https://techread.w24.io/download/1a0230ea-4a96-4522-ae8e-a25aed463a3e Important Accessing the payload url requires a valid authentication token","title":"Pages and Sheets"},{"location":"asks/page/#w24document-w24page","text":"As the image below illustrates, a W24Document constist of one more multiple W24Pages. You can think of it as the pages in the PDF document that you submitted. If you send us an image, the W24Document will have exactly one page: your image. Our algorithm automatically assesses the contents of each page and classifies it either as W24TitlePage or W24Sheet .","title":"W24Document &amp; W24Page"},{"location":"asks/page/#w24askpagethumbnail","text":"The W24AskPageThumbnail will return a thumbnail for each page in the document. You will receive one W24AskPageThumbnailResponse for each Page in the Document. The The Page Thumbnail will differs from the original Document in serveral ways: It is converted to grayscale , i.e, no matter how colorful the original drawing was, you will always receive a grayscale image in response. Please let us know if you need to have the colorized image; we are happy to add a parameter to the Ask. It is denoised , i.e, various kinds of noise will have been removed PAYLOAD DICT document_id UUID4 -- Example: \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\" Unique UUID that identifies the document page_id UUID4 -- Example: \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\" Unqiue UUID that identifies the page page_number int -- Example: 1 Page Number in the Document (starts at 1) PAYLOAD URL url Http -- Example: https://techread.w24.io/download/7153d685-9792-4c08-86bf-48474119b9db Important Accessing the payload url requires a valid authentication token","title":"W24AskPageThumbnail"},{"location":"asks/page/#w24titlepage","text":"Every W24Page that is not classified as Sheet is automatically classified as W24TitlePage. Important The W24TitlePage objects are currently only available to development partners.","title":"W24TitlePage"},{"location":"asks/page/#w24sheet","text":"If a W24Page contains a Technical Drawing, it will be classified as W24Sheet. The Sheet corresponds to the content of the main frame on the Page. If the page does not contain such a frame, the complete Page is interpreted as Sheet. The Sheet Thumbnail will differs from the original Document in serveral ways: It is converted to grayscale , i.e, no matter how colorful the original drawing was, you will always receive a grayscale image in response. Please let us know if you need to have the colorized image; we are happy to add a parameter to the Ask. It is denoised , i.e, various kinds of noise will have been removed It is uprighted , i.e., rotated in the way a human intelligence would","title":"W24Sheet"},{"location":"asks/page/#w24asksheetthumbnail","text":"The W24AskSheetThumbnail will return a thumbnail for each sheet in the document. PAYLOAD DICT document_id UUID4 -- Example: \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\" Unique UUID that identifies the document page_id UUID4 -- Example: \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\" Unqiue UUID that identifies the page sheet_id UUID4 -- Example: \"5bc164d4-df0d-4482-9048-3a84de010abf\" Unqiue UUID that identifies the sheet PAYLOAD URL url Http -- Example: https://techread.w24.io/download/1a0230ea-4a96-4522-ae8e-a25aed463a3e Important Accessing the payload url requires a valid authentication token","title":"W24AskSheetThumbnail"},{"location":"asks/sectional/","text":"W24Sectional \u00b6 The W24Sectional is an umbrella term to describe: the perspective drawings looking onto the work piece, and the cuts through the work piece W24AskSectionalThumbnail \u00b6 The W24AskSectionalThumbnail will return a thumbnail for each plane on the sheet. This also includes detail drawings. The thumbnail will be rotated automatically. PAYLOAD DICT document_id UUID4 -- Example: \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\" Unique UUID that identifies the document page_id UUID4 -- Example: \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\" Unqiue UUID that identifies the page sheet_id UUID4 -- Example: \"5bc164d4-df0d-4482-9048-3a84de010abf\" Unqiue UUID that identifies the sheet sectional_id UUID4 -- Example: \"ba72f9f1-918a-43c9-8178-095ff9910024\" Unqiue UUID that identifies the sectional PAYLOAD URL url Http -- Example: https://techread.w24.io/download/93bbef40-a433-4276-bc3f-0e341c67a75c Important Accessing the payload url requires a valid authentication token","title":"Sectionals"},{"location":"asks/sectional/#w24sectional","text":"The W24Sectional is an umbrella term to describe: the perspective drawings looking onto the work piece, and the cuts through the work piece","title":"W24Sectional"},{"location":"asks/sectional/#w24asksectionalthumbnail","text":"The W24AskSectionalThumbnail will return a thumbnail for each plane on the sheet. This also includes detail drawings. The thumbnail will be rotated automatically. PAYLOAD DICT document_id UUID4 -- Example: \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\" Unique UUID that identifies the document page_id UUID4 -- Example: \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\" Unqiue UUID that identifies the page sheet_id UUID4 -- Example: \"5bc164d4-df0d-4482-9048-3a84de010abf\" Unqiue UUID that identifies the sheet sectional_id UUID4 -- Example: \"ba72f9f1-918a-43c9-8178-095ff9910024\" Unqiue UUID that identifies the sectional PAYLOAD URL url Http -- Example: https://techread.w24.io/download/93bbef40-a433-4276-bc3f-0e341c67a75c Important Accessing the payload url requires a valid authentication token","title":"W24AskSectionalThumbnail"},{"location":"asks/variant/","text":"W24VariantTable \u00b6 To make life more interesting, some Technical Drawings contain a seperate specification table that typically looks something like this: length width Type A 10 10 +/- 0.1 Type B 10 12 +/- 0.2 A Sheet that contains such a specification table consequently describes multiple W24Variants; in this case the parts \"Type A\" and \"Type B\". Note Please get in touch if you are interested in obtaining this information through the API. W24Variant \u00b6 Each sheet may describe one or more Variants, depending on the precense of a W24VariantTable . You can think of it as a different term for a Part. In most cases a Technical Drawing will only describe one Variant (i.e., one Part), but we see W24VariantTables in about 2-5% of the files. So be sure to implement the handling of multiple variants. W24VariantMeasures \u00b6 PAYLOAD DICT document_id UUID4 -- Example: \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\" Unique UUID that identifies the document page_id UUID4 -- Example: \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\" Unqiue UUID that identifies the page sheet_id UUID4 -- Example: \"5bc164d4-df0d-4482-9048-3a84de010abf\" Unqiue UUID that identifies the sheet variant_id UUID4 -- Example: \"0c44364f-e50f-499a-8796-92e2dc907cbd\" Unqiue UUID that identifies the variant measures List[W24Measure] List of all the Measures that were detected on the Sectional W24Measure \u00b6 PAYLOAD DICT line Tuple[Tuple[float,float],Tuple[float,float]] -- Example: ((0.1,0.2),(0.5,0.5)) Relative x-y coordinates of the Start/End point of the Measure in the Pixel Coordinate system that the Measure is associated to. Typically this will be the W24AskVariantMeasuresResponse. The coordinates are normalized by the width and height of the associated object (e.g., the sectional). If you want to obtain the absolute position in the original image, you need to consider the following offsets: sectional + canvas + sheet. label str -- Example 4.1 +/- 0.2 String representation of the label for human consumption size float -- Example 4.1 Size of the measure as (signed) float in mm. NOTE: For Wrench_sizes this will reflect the actual distance that the measure describes even if the label reads \"SW...\", but is associated with the short edge distance NOTE: For Whitworth_sizes this will reflect the associacted value in mm. If you want to obtain the whitworth_size in inches, you'll find it in the whitworth_size fit_size Optional[str] -- Example h11 Fit size according to ISO 286-1 / ISO 286-2. NOTE: this value will only be set when the technical drawing explicitly states it. The API does not translate tolerance groups into fit_size equivalents. tolerance_upper Optional[float] -- Example 0.2 Signed upper tolerance as stated in the drawing. NOTE: When a fit size is present, this tolerance will be unset. If you need the API to behave in a different way, please get in touch with a suggestion how to handle inconsistencies between the tolerances and the fit_size tolerance_lower Optional[float] -- Example -0.2 Lower Tolerance (See tolerance_upper) chamfer_angle Optional[float] -- Example 45 for 45\u00b0 Chamfer angle in degree as indicated on the label wrench_size Optional[float] -- Example 4 for SW4 Wrench Size in mm whitworth_size Optional[float] -- Example 0.125 for G1/8'' Whitworth Size in inch thread_type Optional[W24MeasureThreadType] -- Example METRIC_STANDARD_THREAD for M... Thread type described by the measure. Currently supported: METRIC_STANDARD_THREAD thread_pitch Optional[float] -- Example 1.5 for M4x1.5 Thread pitch in mm thread_handedness Optional[W24MeasureThreadHandedness] -- Example LEFT for M4LH Handedness of the thread. Defaults to RIGHT if not explicitly stated on the drawing warnings List[W24MeasureWarning] -- List of Warnings that are associated with the measure. See W24MeasureWarning for details W24MeasureWarning \u00b6 PAYLOAD DICT warning_type W24MeasureWarningType -- Example: UNCONVENTIONAL_TOLERANCE_ORDER","title":"Variants and Measures"},{"location":"asks/variant/#w24varianttable","text":"To make life more interesting, some Technical Drawings contain a seperate specification table that typically looks something like this: length width Type A 10 10 +/- 0.1 Type B 10 12 +/- 0.2 A Sheet that contains such a specification table consequently describes multiple W24Variants; in this case the parts \"Type A\" and \"Type B\". Note Please get in touch if you are interested in obtaining this information through the API.","title":"W24VariantTable"},{"location":"asks/variant/#w24variant","text":"Each sheet may describe one or more Variants, depending on the precense of a W24VariantTable . You can think of it as a different term for a Part. In most cases a Technical Drawing will only describe one Variant (i.e., one Part), but we see W24VariantTables in about 2-5% of the files. So be sure to implement the handling of multiple variants.","title":"W24Variant"},{"location":"asks/variant/#w24variantmeasures","text":"PAYLOAD DICT document_id UUID4 -- Example: \"44200f9b-1bb6-48bc-9370-de8a28e8dbbb\" Unique UUID that identifies the document page_id UUID4 -- Example: \"89f54424-343e-4fd5-8b7d-e09ea5f310fd\" Unqiue UUID that identifies the page sheet_id UUID4 -- Example: \"5bc164d4-df0d-4482-9048-3a84de010abf\" Unqiue UUID that identifies the sheet variant_id UUID4 -- Example: \"0c44364f-e50f-499a-8796-92e2dc907cbd\" Unqiue UUID that identifies the variant measures List[W24Measure] List of all the Measures that were detected on the Sectional","title":"W24VariantMeasures"},{"location":"asks/variant/#w24measure","text":"PAYLOAD DICT line Tuple[Tuple[float,float],Tuple[float,float]] -- Example: ((0.1,0.2),(0.5,0.5)) Relative x-y coordinates of the Start/End point of the Measure in the Pixel Coordinate system that the Measure is associated to. Typically this will be the W24AskVariantMeasuresResponse. The coordinates are normalized by the width and height of the associated object (e.g., the sectional). If you want to obtain the absolute position in the original image, you need to consider the following offsets: sectional + canvas + sheet. label str -- Example 4.1 +/- 0.2 String representation of the label for human consumption size float -- Example 4.1 Size of the measure as (signed) float in mm. NOTE: For Wrench_sizes this will reflect the actual distance that the measure describes even if the label reads \"SW...\", but is associated with the short edge distance NOTE: For Whitworth_sizes this will reflect the associacted value in mm. If you want to obtain the whitworth_size in inches, you'll find it in the whitworth_size fit_size Optional[str] -- Example h11 Fit size according to ISO 286-1 / ISO 286-2. NOTE: this value will only be set when the technical drawing explicitly states it. The API does not translate tolerance groups into fit_size equivalents. tolerance_upper Optional[float] -- Example 0.2 Signed upper tolerance as stated in the drawing. NOTE: When a fit size is present, this tolerance will be unset. If you need the API to behave in a different way, please get in touch with a suggestion how to handle inconsistencies between the tolerances and the fit_size tolerance_lower Optional[float] -- Example -0.2 Lower Tolerance (See tolerance_upper) chamfer_angle Optional[float] -- Example 45 for 45\u00b0 Chamfer angle in degree as indicated on the label wrench_size Optional[float] -- Example 4 for SW4 Wrench Size in mm whitworth_size Optional[float] -- Example 0.125 for G1/8'' Whitworth Size in inch thread_type Optional[W24MeasureThreadType] -- Example METRIC_STANDARD_THREAD for M... Thread type described by the measure. Currently supported: METRIC_STANDARD_THREAD thread_pitch Optional[float] -- Example 1.5 for M4x1.5 Thread pitch in mm thread_handedness Optional[W24MeasureThreadHandedness] -- Example LEFT for M4LH Handedness of the thread. Defaults to RIGHT if not explicitly stated on the drawing warnings List[W24MeasureWarning] -- List of Warnings that are associated with the measure. See W24MeasureWarning for details","title":"W24Measure"},{"location":"asks/variant/#w24measurewarning","text":"PAYLOAD DICT warning_type W24MeasureWarningType -- Example: UNCONVENTIONAL_TOLERANCE_ORDER","title":"W24MeasureWarning"},{"location":"basics/authentication/","text":"Authentication \u00b6 Werk24 uses the AWS Cognito Service to identify a user. We have decided to use on this service, mainly because it provides you with two advantages: The source code that handles the authentication is constantly monitored and improved by a dedicated and highly-specialized team. Many standard libraries exist that handle the authentication process for you. We can provide you with diffent user names for different geographies, allowing you to ensure that your customer's data does not leave its region-of-origin. See General Data Protetion Regulation (GDPR) . Credentials File \u00b6 During the registration process, Werk24 will have provided you with an .werk24 file that contains all the information that is required to authenticate with our API. This file assumes that you have only registered one user with Werk24. The file will look like this W24TECHREAD_AUTH_REGION=\"eu-central-1\" W24TECHREAD_AUTH_CLIENT_ID=\"xxxxxxxxxxxxxxxxxxxxxxxxxx\" W24TECHREAD_AUTH_CLIENT_SECRET=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" W24TECHREAD_AUTH_USERNAME=\"xx@xx.xx\" W24TECHREAD_AUTH_PASSWORD=\"--- INSERT HERE ---\" W24TECHREAD_SERVER_HTTPS=\"techread.w24.io\" W24TECHREAD_SERVER_WSS=\"techread-ws.w24.io\" W24TECHREAD_VERSION=\"v1\" The content of the file will be used when you call the TechreadClient.make_from_env() method.","title":"Authentication"},{"location":"basics/authentication/#authentication","text":"Werk24 uses the AWS Cognito Service to identify a user. We have decided to use on this service, mainly because it provides you with two advantages: The source code that handles the authentication is constantly monitored and improved by a dedicated and highly-specialized team. Many standard libraries exist that handle the authentication process for you. We can provide you with diffent user names for different geographies, allowing you to ensure that your customer's data does not leave its region-of-origin. See General Data Protetion Regulation (GDPR) .","title":"Authentication"},{"location":"basics/authentication/#credentials-file","text":"During the registration process, Werk24 will have provided you with an .werk24 file that contains all the information that is required to authenticate with our API. This file assumes that you have only registered one user with Werk24. The file will look like this W24TECHREAD_AUTH_REGION=\"eu-central-1\" W24TECHREAD_AUTH_CLIENT_ID=\"xxxxxxxxxxxxxxxxxxxxxxxxxx\" W24TECHREAD_AUTH_CLIENT_SECRET=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" W24TECHREAD_AUTH_USERNAME=\"xx@xx.xx\" W24TECHREAD_AUTH_PASSWORD=\"--- INSERT HERE ---\" W24TECHREAD_SERVER_HTTPS=\"techread.w24.io\" W24TECHREAD_SERVER_WSS=\"techread-ws.w24.io\" W24TECHREAD_VERSION=\"v1\" The content of the file will be used when you call the TechreadClient.make_from_env() method.","title":"Credentials File"},{"location":"basics/quickstart/","text":"Getting Started \u00b6 Werk24 is designed to make your life with handling Technical Drawings as convenient as possible. This Tutorial will get you set up. We will: Install the Client Store the Credentials Test the Client Install the Client \u00b6 Werk24 provides an easy-to-use and easy-to-extend Python-based client. Install our Python Client using pip : pip install werk24 Note Should you be interested in a Client for a different language, please get in touch with us at info@werk24.biz. Configure the Client \u00b6 The Client uses AWS Cognito to handle Authentication. This has several advantages: Security updates are handled by a dedicated team Standard libraries are available for a large range of languages You will be able to maintain individual accounts for your own customers. During the registration process we provide you with a .werk24 file, that contains all the information that you will need. It will look similar to this: W24TECHREAD_AUTH_REGION=\"eu-central-1\" W24TECHREAD_AUTH_CLIENT_ID=\"xxxxxxxxxxxxxxxxxxxxxxxxxx\" W24TECHREAD_AUTH_CLIENT_SECRET=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" W24TECHREAD_AUTH_USERNAME=\"xx@xx.xx\" W24TECHREAD_AUTH_PASSWORD=\"--- INSERT HERE ---\" W24TECHREAD_SERVER_HTTPS=\"techread.w24.io\" W24TECHREAD_SERVER_WSS=\"techread-ws.w24.io\" W24TECHREAD_VERSION=\"v1\" Important In the welcome email we will also have provided you with a temporary password for your application. You will need to update the password through this link - set password - before you will be able to access the API. Replace the --- INSERT HERE --- line with your password and store the file in the base path of your project. Important Add .werk24 to your .gitignore file to ensure that the credentials remain stored locally. Alternatively you can also store the credentials as ENVIRONMENT VARIABLES. For more details see Authentication Test the Client \u00b6 You can check whether client is installed and configured correctly by submitting a simple Techread request through the CLI. The request submits the technical drawing to the API and returns a thumbnail of the individual sectionals. To be able to see the image, ensure that you have the Pillow package installed. pip install Pillow After that you can submit the request by running w24cli techread --ask-page-thumbnail ./your-file.pdf You should now see one or more images of the individual cuts on your Technical Drawing. Have a look at the additional details at the CLI Documentation .","title":"Getting Started"},{"location":"basics/quickstart/#getting-started","text":"Werk24 is designed to make your life with handling Technical Drawings as convenient as possible. This Tutorial will get you set up. We will: Install the Client Store the Credentials Test the Client","title":"Getting Started"},{"location":"basics/quickstart/#install-the-client","text":"Werk24 provides an easy-to-use and easy-to-extend Python-based client. Install our Python Client using pip : pip install werk24 Note Should you be interested in a Client for a different language, please get in touch with us at info@werk24.biz.","title":"Install the Client"},{"location":"basics/quickstart/#configure-the-client","text":"The Client uses AWS Cognito to handle Authentication. This has several advantages: Security updates are handled by a dedicated team Standard libraries are available for a large range of languages You will be able to maintain individual accounts for your own customers. During the registration process we provide you with a .werk24 file, that contains all the information that you will need. It will look similar to this: W24TECHREAD_AUTH_REGION=\"eu-central-1\" W24TECHREAD_AUTH_CLIENT_ID=\"xxxxxxxxxxxxxxxxxxxxxxxxxx\" W24TECHREAD_AUTH_CLIENT_SECRET=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" W24TECHREAD_AUTH_USERNAME=\"xx@xx.xx\" W24TECHREAD_AUTH_PASSWORD=\"--- INSERT HERE ---\" W24TECHREAD_SERVER_HTTPS=\"techread.w24.io\" W24TECHREAD_SERVER_WSS=\"techread-ws.w24.io\" W24TECHREAD_VERSION=\"v1\" Important In the welcome email we will also have provided you with a temporary password for your application. You will need to update the password through this link - set password - before you will be able to access the API. Replace the --- INSERT HERE --- line with your password and store the file in the base path of your project. Important Add .werk24 to your .gitignore file to ensure that the credentials remain stored locally. Alternatively you can also store the credentials as ENVIRONMENT VARIABLES. For more details see Authentication","title":"Configure the Client"},{"location":"basics/quickstart/#test-the-client","text":"You can check whether client is installed and configured correctly by submitting a simple Techread request through the CLI. The request submits the technical drawing to the API and returns a thumbnail of the individual sectionals. To be able to see the image, ensure that you have the Pillow package installed. pip install Pillow After that you can submit the request by running w24cli techread --ask-page-thumbnail ./your-file.pdf You should now see one or more images of the individual cuts on your Technical Drawing. Have a look at the additional details at the CLI Documentation .","title":"Test the Client"},{"location":"cli/basic/","text":"Command Line Interface \u00b6 If you have installed Werk24 with PIP, you will have the w24cli command available. usage: w24cli [-h] {techread} ... positional arguments: {techread} techread Submit a Technical Drawing to Werk24 for analysis optional arguments: -h, --help show this help message and exit Subcommand Techread \u00b6 The command line interface allows you to interact with the Werk24 APIs. To ensure downwards compatibility, we have added the subcommand ' techread '. Further subcommands might follow in the future.","title":"Basic"},{"location":"cli/basic/#command-line-interface","text":"If you have installed Werk24 with PIP, you will have the w24cli command available. usage: w24cli [-h] {techread} ... positional arguments: {techread} techread Submit a Technical Drawing to Werk24 for analysis optional arguments: -h, --help show this help message and exit","title":"Command Line Interface"},{"location":"cli/basic/#subcommand-techread","text":"The command line interface allows you to interact with the Werk24 APIs. To ensure downwards compatibility, we have added the subcommand ' techread '. Further subcommands might follow in the future.","title":"Subcommand Techread"},{"location":"cli/techread/","text":"Techread Subcommand \u00b6 The techread subcommand allows you to submit your Technical Drawing and ask Werk24 to return certain details about it. We call these details \"asks\". See API/Asks for a more detailed description. While the API allows you to define your asks in a more granular way, the CLI will always request each ask with its default attributes. Available Commands \u00b6 The sniplet below gives you an overview over the available commands. You can obtain the same output by calling w24cli techread --help . usage: w24cli techread [-h] [--ask-techread-started] [--ask-page-thumbnail] [--ask-sheet-thumbnail] [--ask-sectional-thumbnail] [--ask-variant-measures] input_file positional arguments: input_file path to the file that is to be analyzed optional arguments: -h, --help show this help message and exit --ask-techread-started ask for a callback when the techread process has been picked up by a worker --ask-page-thumbnail ask for a thumbnail for each page in the document --ask-sheet-thumbnail ask for a thumbnail of each sheet in the document --ask-sectional-thumbnail ask for a thumbnail of each sectional of each sheet in the document --ask-variant-measures ask for the measures of each variant","title":"Techread"},{"location":"cli/techread/#techread-subcommand","text":"The techread subcommand allows you to submit your Technical Drawing and ask Werk24 to return certain details about it. We call these details \"asks\". See API/Asks for a more detailed description. While the API allows you to define your asks in a more granular way, the CLI will always request each ask with its default attributes.","title":"Techread Subcommand"},{"location":"cli/techread/#available-commands","text":"The sniplet below gives you an overview over the available commands. You can obtain the same output by calling w24cli techread --help . usage: w24cli techread [-h] [--ask-techread-started] [--ask-page-thumbnail] [--ask-sheet-thumbnail] [--ask-sectional-thumbnail] [--ask-variant-measures] input_file positional arguments: input_file path to the file that is to be analyzed optional arguments: -h, --help show this help message and exit --ask-techread-started ask for a callback when the techread process has been picked up by a worker --ask-page-thumbnail ask for a thumbnail for each page in the document --ask-sheet-thumbnail ask for a thumbnail of each sheet in the document --ask-sectional-thumbnail ask for a thumbnail of each sectional of each sheet in the document --ask-variant-measures ask for the measures of each variant","title":"Available Commands"}]}